{
  "hash": "838bcc4f7cffd93699cdab1aaef834d9",
  "result": {
    "markdown": "---\ntitle: Manipulating, analyzing and exporting data with tidyverse\nauthor: Data Carpentry contributors\n---\n\n::: {.cell}\n\n:::\n\n\n### Manipulating and analyzing data with dplyr\n\n------------\n\n> ### Learning Objectives\n>\n> * Describe the purpose of the **`dplyr`** and **`tidyr`** packages.\n> * Select certain columns in a data frame with the **`dplyr`** function `select`.\n> * Extract certain rows in a data frame according to logical (boolean) conditions with the **`dplyr`** function `filter` .\n> * Link the output of one **`dplyr`** function to the input of another function with the 'pipe' operator `%>%`.\n> * Add new columns to a data frame that are functions of existing columns with `mutate`.\n> * Use the split-apply-combine concept for data analysis.\n> * Use `summarize`, `group_by`, and `count` to split a data frame into groups of observations, apply summary statistics for each group, and then combine the results.\n> * Describe the concept of a wide and a long table format and for which purpose those formats are useful.\n> * Describe what key-value pairs are.\n> * Reshape a data frame from long to wide format and back with the `spread` and `gather` commands from the **`tidyr`** package.\n> * Export a data frame to a .csv file.\n\n------------\n\n# Data manipulation using **`dplyr`** and **`tidyr`**\n\nBracket subsetting is handy, but it can be cumbersome and difficult to read,\nespecially for complicated operations. Enter **`dplyr`**. **`dplyr`** is a package for\nhelping with tabular data manipulation. It pairs nicely with **`tidyr`** which enables you to swiftly convert between different data formats for plotting and analysis.\n\nThe **`tidyverse`** package is an\n\"umbrella-package\" that installs **`tidyr`**, **`dplyr`**, and several other useful packages for data analysis, such as  **`ggplot2`**, **`tibble`**, etc.\n\nThe **`tidyverse`** package tries to address 3 common issues that arise when\ndoing data analysis in R:\n\n1. The results from a base R function sometimes depend on the type of data.\n2. R expressions are used in a non standard way, which can be confusing for new\n   learners.\n3. The existence of hidden arguments having default operations that new learners are not aware\n   of.\n\nYou should already have installed and loaded the **`tidyverse`** package.\nIf you haven't already done so, you can type `install.packages(\"tidyverse\")` straight into the console. Then, type `library(tidyverse)` to load the package.\n\n## What are **`dplyr`** and **`tidyr`**?\n\nThe package **`dplyr`** provides helper tools for the most common data manipulation\ntasks. It is built to work directly with data frames, with many common tasks\noptimized by being written in a compiled language (C++). An additional feature is the\nability to work directly with data stored in an external database. The benefits of\ndoing this are that the data can be managed natively in a relational database,\nqueries can be conducted on that database, and only the results of the query are\nreturned.\n\nThis addresses a common problem with R in that all operations are conducted\nin-memory and thus the amount of data you can work with is limited by available\nmemory. The database connections essentially remove that limitation in that you\ncan connect to a database of many hundreds of GB, conduct queries on it directly, and pull\nback into R only what you need for analysis.\n\nThe package **`tidyr`** addresses the common problem of wanting to reshape your data for\nplotting and usage by different R functions. For example, sometimes we want data sets where we have one\nrow per measurement. Other times we want a data frame where each measurement type has its\nown column, and rows are instead more aggregated groups\n(e.g., a time period, an experimental unit like a plot or a batch number).\nMoving back and forth between these formats is non-trivial, and **`tidyr`** gives you tools\nfor this and more sophisticated  data manipulation.\n\nTo learn more about **`dplyr`** and **`tidyr`** after the workshop, you may want to check out this\n[handy data transformation with **`dplyr`** cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-transformation.pdf)\nand this [one about **`tidyr`**](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-import.pdf).\n\nAs before, we'll read in our data using the `read_csv()` function from the\ntidyverse package **`readr`**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys <- read_csv(\"data_raw/portal_data_joined.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 34786 Columns: 13\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr (6): species_id, sex, genus, species, taxa, plot_type\n#> dbl (7): record_id, month, day, year, plot_id, hindfoot_length, weight\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## inspect the data\nstr(surveys)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## preview the data\nview(surveys)\n```\n:::\n\n\nNext, we're going to learn some of the most common **`dplyr`** functions:\n\n- `select()`: subset columns\n- `filter()`: subset rows on conditions\n- `mutate()`: create new columns by using information from other columns\n- `group_by()` and `summarize()`: create summary statistics on grouped data\n- `arrange()`: sort results\n- `count()`: count discrete values\n\n## Selecting columns and filtering rows\n\nTo select columns of a data frame, use `select()`. The first argument\nto this function is the data frame (`surveys`), and the subsequent\narguments are the columns to keep.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(surveys, plot_id, species_id, weight)\n```\n:::\n\n\nTo select all columns *except* certain ones, put a \"-\" in front of\nthe variable to exclude it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(surveys, -record_id, -species_id)\n```\n:::\n\n\nThis will select all the variables in `surveys` except `record_id`\nand `species_id`.\n\nTo choose rows based on a specific criterion, use `filter()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(surveys, year == 1995)\n```\n:::\n\n\n## Pipes\n\nWhat if you want to select and filter at the same time? There are three\nways to do this: use intermediate steps, nested functions, or pipes.\n\nWith intermediate steps, you create a temporary data frame and use\nthat as input to the next function, like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys2 <- filter(surveys, weight < 5)\nsurveys_sml <- select(surveys2, species_id, sex, weight)\n```\n:::\n\n\nThis is readable, but can clutter up your workspace with lots of objects that you have to name individually. With multiple steps, that can be hard to keep track of.\n\nYou can also nest functions (i.e. one function inside of another), like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys_sml <- select(filter(surveys, weight < 5), species_id, sex, weight)\n```\n:::\n\n\nThis is handy, but can be difficult to read if too many functions are nested, as\nR evaluates the expression from the inside out (in this case, filtering, then selecting).\n\nThe last option, *pipes*, are a recent addition to R. Pipes let you take\nthe output of one function and send it directly to the next, which is useful\nwhen you need to do many things to the same dataset.  Pipes in R look like\n`%>%` and are made available via the **`magrittr`** package, installed automatically\nwith **`dplyr`**. If you use RStudio, you can type the pipe with <kbd>Ctrl</kbd>\n+ <kbd>Shift</kbd> + <kbd>M</kbd> if you have a PC or <kbd>Cmd</kbd> +\n<kbd>Shift</kbd> + <kbd>M</kbd> if you have a Mac.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  filter(weight < 5) %>%\n  select(species_id, sex, weight)\n```\n:::\n\n\nIn the above code, we use the pipe to send the `surveys` dataset first through\n`filter()` to keep rows where `weight` is less than 5, then through `select()`\nto keep only the `species_id`, `sex`, and `weight` columns. Since `%>%` takes\nthe object on its left and passes it as the first argument to the function on\nits right, we don't need to explicitly include the data frame as an argument\nto the `filter()` and `select()` functions any more.\n\nSome may find it helpful to read the pipe like the word \"then.\" For instance,\nin the example above, we took the data frame `surveys`, *then* we `filter`ed\nfor rows with `weight < 5`, *then* we `select`ed columns `species_id`, `sex`,\nand `weight`. The **`dplyr`** functions by themselves are somewhat simple,\nbut by combining them into linear workflows with the pipe we can accomplish\nmore complex manipulations of data frames.\n\nIf we want to create a new object with this smaller version of the data, we\ncan assign it a new name:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys_sml <- surveys %>%\n  filter(weight < 5) %>%\n  select(species_id, sex, weight)\n\nsurveys_sml\n```\n:::\n\n\nNote that the final data frame is the leftmost part of this expression.\n\n> ### Challenge {.challenge}\n>\n>  Using pipes, subset the `surveys` data to include animals collected before\n>  1995 and retain only the columns `year`, `sex`, and `weight`.\n>\n>\n> ::: {.cell answer='true'}\n> <div class=\"accordion\">\n> <h3 class=\"toc-ignore\">Answer</h3>\n> <div style=\"background: #fff;\">\n> \n> ```{.r .cell-code}\n> surveys %>%\n>     filter(year < 1995) %>%\n>     select(year, sex, weight)\n> ```\n> \n> </div>\n> </div>\n> :::\n\n\n::: {.cell}\n\n:::\n\n\n### Mutate\n\nFrequently you'll want to create new columns based on the values in existing\ncolumns, for example to do unit conversions, or to find the ratio of values in two\ncolumns. For this we'll use `mutate()`.\n\nTo create a new column of weight in kg:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  mutate(weight_kg = weight / 1000)\n```\n:::\n\n\nYou can also create a second new column based on the first new column within the same call of `mutate()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  mutate(weight_kg = weight / 1000,\n         weight_lb = weight_kg * 2.2)\n```\n:::\n\n\nIf this runs off your screen and you just want to see the first few rows, you\ncan use a pipe to view the `head()` of the data. (Pipes work with non-**`dplyr`**\nfunctions, too, as long as the **`dplyr`** or `magrittr` package is loaded).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  mutate(weight_kg = weight / 1000) %>%\n  head()\n```\n:::\n\n\nThe first few rows of the output are full of `NA`s, so if we wanted to remove\nthose we could insert a `filter()` in the chain:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  filter(!is.na(weight)) %>%\n  mutate(weight_kg = weight / 1000) %>%\n  head()\n```\n:::\n\n\n`is.na()` is a function that determines whether something is an `NA`. The `!`\nsymbol negates the result, so we're asking for every row where weight *is not* an `NA`.\n\n> ### Challenge {.challenge}\n>\n>  Create a new data frame from the `surveys` data that meets the following\n>  criteria: contains only the `species_id` column and a new column called\n>  `hindfoot_cm` containing the `hindfoot_length` values (currently in mm)\n>  converted to centimeters.\n>  In this `hindfoot_cm` column, there are no `NA`s and all values are less\n>  than 3.\n>\n>  **Hint**: think about how the commands should be ordered to produce this data frame!\n>\n> ::: {.cell answer='true'}\n> <div class=\"accordion\">\n> <h3 class=\"toc-ignore\">Answer</h3>\n> <div style=\"background: #fff;\">\n> \n> ```{.r .cell-code}\n> surveys_hindfoot_cm <- surveys %>%\n>     filter(!is.na(hindfoot_length)) %>%\n>     mutate(hindfoot_cm = hindfoot_length / 10) %>%\n>     filter(hindfoot_cm < 3) %>%\n>     select(species_id, hindfoot_cm)\n> ```\n> \n> </div>\n> </div>\n> :::\n\n\n\n::: {.cell}\n\n:::\n\n\n### Split-apply-combine data analysis and the `summarize()` function\n\nMany data analysis tasks can be approached using the *split-apply-combine*\nparadigm: split the data into groups, apply some analysis to each group, and\nthen combine the results. Key functions of **`dplyr`** for this workflow are\n`group_by()` and `summarize()`.\n\n\n#### The `group_by()` and `summarize()` functions\n\n`group_by()` is often used together with `summarize()`, which collapses each\ngroup into a single-row summary of that group.  `group_by()` takes as arguments\nthe column names that contain the **categorical** variables for which you want\nto calculate the summary statistics. So to compute the mean `weight` by sex:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  group_by(sex) %>%\n  summarize(mean_weight = mean(weight, na.rm = TRUE))\n```\n:::\n\n\nYou may also have noticed that the output from these calls doesn't run off the\nscreen anymore. It's one of the advantages of `tbl_df` over data frame.\n\nYou can also group by multiple columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  group_by(sex, species_id) %>%\n  summarize(mean_weight = mean(weight, na.rm = TRUE)) %>%\n  tail()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `summarise()` has grouped output by 'sex'. You can override using the `.groups`\n#> argument.\n```\n:::\n:::\n\n\nHere, we used `tail()` to look at the last six rows of our summary. Before, we had\nused `head()` to look at the first six rows. We can see that the `sex` column contains\n`NA` values because some animals had escaped before their sex and body weights\ncould be determined. The resulting `mean_weight` column does not contain `NA` but\n`NaN` (which refers to \"Not a Number\") because `mean()` was called on a vector of\n`NA` values while at the same time setting `na.rm = TRUE`. To avoid this, we can\nremove the missing values for weight before we attempt to calculate the summary\nstatistics on weight. Because the missing values are removed first, we can omit\n`na.rm = TRUE` when computing the mean:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  filter(!is.na(weight)) %>%\n  group_by(sex, species_id) %>%\n  summarize(mean_weight = mean(weight))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `summarise()` has grouped output by 'sex'. You can override using the `.groups`\n#> argument.\n```\n:::\n:::\n\n\nHere, again, the output from these calls doesn't run off the screen\nanymore. If you want to display more data, you can use the `print()` function\nat the end of your chain with the argument `n` specifying the number of rows to\ndisplay:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  filter(!is.na(weight)) %>%\n  group_by(sex, species_id) %>%\n  summarize(mean_weight = mean(weight)) %>%\n  print(n = 15)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `summarise()` has grouped output by 'sex'. You can override using the `.groups`\n#> argument.\n```\n:::\n:::\n\n\nOnce the data are grouped, you can also summarize multiple variables at the same\ntime (and not necessarily on the same variable). For instance, we could add a\ncolumn indicating the minimum weight for each species for each sex:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  filter(!is.na(weight)) %>%\n  group_by(sex, species_id) %>%\n  summarize(mean_weight = mean(weight),\n            min_weight = min(weight))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `summarise()` has grouped output by 'sex'. You can override using the `.groups`\n#> argument.\n```\n:::\n:::\n\n\nIt is sometimes useful to rearrange the result of a query to inspect the values. For instance, we can sort on `min_weight` to put the lighter species first:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  filter(!is.na(weight)) %>%\n  group_by(sex, species_id) %>%\n  summarize(mean_weight = mean(weight),\n            min_weight = min(weight)) %>%\n  arrange(min_weight)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `summarise()` has grouped output by 'sex'. You can override using the `.groups`\n#> argument.\n```\n:::\n:::\n\n\nTo sort in descending order, we need to add the `desc()` function. If we want to sort the results by decreasing order of mean weight:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  filter(!is.na(weight)) %>%\n  group_by(sex, species_id) %>%\n  summarize(mean_weight = mean(weight),\n            min_weight = min(weight)) %>%\n  arrange(desc(mean_weight))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `summarise()` has grouped output by 'sex'. You can override using the `.groups`\n#> argument.\n```\n:::\n:::\n\n\n\n#### Counting\n\nWhen working with data, we often want to know the number of observations found\nfor each factor or combination of factors. For this task, **`dplyr`** provides\n`count()`. For example, if we wanted to count the number of rows of data for\neach sex, we would do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n    count(sex)\n```\n:::\n\n\nThe `count()` function is shorthand for something we've already seen: grouping by a variable, and summarizing it by counting the number of observations in that group. In other words, `surveys %>% count()` is equivalent to:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n    group_by(sex) %>%\n    summarise(count = n())\n```\n:::\n\n\nFor convenience, `count()` provides the `sort` argument:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n    count(sex, sort = TRUE)\n```\n:::\n\n\nPrevious example shows the use of `count()` to count the number of rows/observations\nfor *one* factor (i.e., `sex`).\nIf we wanted to count *combination of factors*, such as `sex` and `species`,\nwe would specify the first and the second factor as the arguments of `count()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  count(sex, species)\n```\n:::\n\n\nWith the above code, we can proceed with `arrange()` to sort the table\naccording to a number of criteria so that we have a better comparison.\nFor instance, we might want to arrange the table above in (i) an alphabetical order of\nthe levels of the species and (ii) in descending order of the count:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  count(sex, species) %>%\n  arrange(species, desc(n))\n```\n:::\n\n\nFrom the table above, we may learn that, for instance, there are 75 observations of\nthe *albigula* species that are not specified for its sex (i.e. `NA`).\n\n> ### Challenge {.challenge}\n>\n> 1. How many animals were caught in each `plot_type` surveyed?\n>\n> ::: {.cell answer='true'}\n> <div class=\"accordion\">\n> <h3 class=\"toc-ignore\">Answer</h3>\n> <div style=\"background: #fff;\">\n> \n> ```{.r .cell-code}\n> surveys %>%\n>     count(plot_type)\n> ```\n> \n> </div>\n> </div>\n> :::\n>\n> 2. Use `group_by()` and `summarize()` to find the mean, min, and max hindfoot\n> length for each species (using `species_id`). Also add the number of\n> observations (hint: see `?n`).\n>\n> ::: {.cell answer='true'}\n> <div class=\"accordion\">\n> <h3 class=\"toc-ignore\">Answer</h3>\n> <div style=\"background: #fff;\">\n> \n> ```{.r .cell-code}\n> surveys %>%\n>     filter(!is.na(hindfoot_length)) %>%\n>     group_by(species_id) %>%\n>     summarize(\n>         mean_hindfoot_length = mean(hindfoot_length),\n>         min_hindfoot_length = min(hindfoot_length),\n>         max_hindfoot_length = max(hindfoot_length),\n>         n = n()\n>     )\n> ```\n> \n> </div>\n> </div>\n> :::\n>\n> 3. What was the heaviest animal measured in each year? Return the columns `year`,\n> `genus`, `species_id`, and `weight`.\n>\n> ::: {.cell answer='true'}\n> <div class=\"accordion\">\n> <h3 class=\"toc-ignore\">Answer</h3>\n> <div style=\"background: #fff;\">\n> \n> ```{.r .cell-code}\n> surveys %>%\n>     filter(!is.na(weight)) %>%\n>     group_by(year) %>%\n>     filter(weight == max(weight)) %>%\n>     select(year, genus, species, weight) %>%\n>     arrange(year)\n> ```\n> \n> </div>\n> </div>\n> :::\n\n\n\n::: {.cell}\n\n:::\n\n\n### Reshaping with gather and spread\n\nIn the [spreadsheet\nlesson](https://datacarpentry.org/spreadsheet-ecology-lesson/01-format-data/),\nwe discussed how to structure our data leading to the four rules defining a tidy\ndataset:\n\n1. Each variable has its own column\n2. Each observation has its own row\n3. Each value must have its own cell\n4. Each type of observational unit forms a table\n\nHere we examine the fourth rule: Each type of observational unit forms a table.\n\nIn `surveys`, the rows of `surveys` contain the values of variables associated\nwith each record (the unit), values such as the weight or sex of each animal\nassociated with each record. What if instead of comparing records, we\nwanted to compare the different mean weight of each genus between plots? (Ignoring `plot_type` for simplicity).\n\nWe'd need to create a new table where each row (the unit) is comprised of values of variables associated with each plot. In practical terms this means the values\nin `genus` would become the names of column variables and the cells would contain the values of the mean weight observed on each plot.\n\nHaving created a new table, it is therefore straightforward to explore the\nrelationship between the weight of different genera within, and between, the\nplots. The key point here is that we are still following a tidy data structure,\nbut we have **reshaped** the data according to the observations of interest:\naverage genus weight per plot instead of recordings per date.\n\nThe opposite transformation would be to transform column names into values of\na variable.\n\nWe can do both these of transformations with two `tidyr` functions, `spread()`\nand `gather()`.\n\n#### Spreading\n\n`spread()` takes three principal arguments:\n\n1. the data\n2. the *key* column variable whose values will become new column names.  \n3. the *value* column variable whose values will fill the new column variables.\n\nFurther arguments include `fill` which, if set, fills in missing values with\nthe value provided.\n\nLet's use `spread()` to transform surveys to find the mean weight of each\ngenus in each plot over the entire survey period. We use `filter()`,\n`group_by()` and `summarise()` to filter our observations and variables of\ninterest, and create a new variable for the `mean_weight`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys_gw <- surveys %>%\n  filter(!is.na(weight)) %>%\n  group_by(plot_id, genus) %>%\n  summarize(mean_weight = mean(weight))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `summarise()` has grouped output by 'plot_id'. You can override using the\n#> `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nstr(surveys_gw)\n```\n:::\n\n\nThis yields `surveys_gw` where the observations for each plot are spread across\nmultiple rows, 196 observations of 3 variables.\nUsing `spread()` to key on `genus` with values from `mean_weight` this becomes\n24 observations of 11 variables, one row for each plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys_spread <- surveys_gw %>%\n  spread(key = genus, value = mean_weight)\n\nstr(surveys_spread)\n```\n:::\n\n\n![](img/spread_data_R.png)\n\nWe could now plot comparisons between the weight of genera (one is called a genus, multiple are called genera) in different plots,\nalthough we may wish to fill in the missing values first.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys_gw %>%\n  spread(genus, mean_weight, fill = 0) %>%\n  head()\n```\n:::\n\n\n#### Gathering\n\nThe opposing situation could occur if we had been provided with data in the\nform of `surveys_spread`, where the genus names are column names, but we\nwish to treat them as values of a genus variable instead.\n\nIn this situation we are gathering the column names and turning them into a\npair of new variables. One variable represents the column names as values, and\nthe other variable contains the values previously associated with the column names.\n\n`gather()` takes four principal arguments:\n\n1. the data\n2. the *key* column variable we wish to create from column names.\n3. the *values* column variable we wish to create and fill with values\nassociated with the key.\n4. the names of the columns we use to fill the key variable (or to drop).\n\nTo recreate `surveys_gw` from `surveys_spread` we would create a key called\n`genus` and value called `mean_weight` and use all columns except `plot_id` for\nthe key variable. Here we exclude `plot_id` from being `gather()`ed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys_gather <- surveys_spread %>%\n  gather(key = \"genus\", value = \"mean_weight\", -plot_id)\n\nstr(surveys_gather)\n```\n:::\n\n\n![](img/gather_data_R.png)\n\nNote that now the `NA` genera are included in the re-gathered format. Spreading\nand then gathering can be a useful way to balance out a dataset so every\nreplicate has the same composition.\n\nWe could also have used a specification for what columns to include. This can be\nuseful if you have a large number of identifying columns, and it allows you to type less in order to\nspecify what to gather than what to leave alone. And if the columns are directly\nadjacent, we don't even need to list them all out - instead you can use the `:` operator!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys_spread %>%\n  gather(key = \"genus\", value = \"mean_weight\", Baiomys:Spermophilus) %>%\n  head()\n```\n:::\n\n\n> ### Challenge {.challenge}\n>\n> 1. Spread the `surveys` data frame with `year` as columns, `plot_id`\n>   as rows, and the\n>   number of genera per plot as the values. You will need to summarize before\n>   reshaping, and use the function `n_distinct()` to get the number of unique\n>   genera within a particular chunk of data. It's a powerful function! See\n>   `?n_distinct` for more.\n>\n> ::: {.cell answer='true'}\n> <div class=\"accordion\">\n> <h3 class=\"toc-ignore\">Answer</h3>\n> <div style=\"background: #fff;\">\n> \n> ```{.r .cell-code}\n> surveys_spread_genera <- surveys %>%\n>   group_by(plot_id, year) %>%\n>   summarize(n_genera = n_distinct(genus)) %>%\n>   spread(year, n_genera)\n> ```\n> \n> ::: {.cell-output .cell-output-stderr}\n> ```\n> #> `summarise()` has grouped output by 'plot_id'. You can override using the\n> #> `.groups` argument.\n> ```\n> :::\n> \n> ```{.r .cell-code}\n> head(surveys_spread_genera)\n> ```\n> \n> </div>\n> </div>\n> :::\n>\n> 2. Now take that data frame and `gather()` it again, so each row is a unique\n>    `plot_id` by `year` combination.\n>\n> ::: {.cell answer='true'}\n> <div class=\"accordion\">\n> <h3 class=\"toc-ignore\">Answer</h3>\n> <div style=\"background: #fff;\">\n> \n> ```{.r .cell-code}\n> surveys_spread_genera %>%\n>   gather(\"year\", \"n_genera\", -plot_id)\n> ```\n> \n> </div>\n> </div>\n> :::\n>\n> 3. The `surveys` data set has\n>    two measurement columns: `hindfoot_length` and `weight`.  This makes it\n>    difficult to do things like look at the relationship between mean values of\n>    each measurement per year in different plot types. Let's walk through a\n>    common solution for this type of problem. First, use `gather()` to create a\n>     dataset where we have a key column called `measurement` and a\n>    `value` column that takes on the value of either `hindfoot_length` or\n>    `weight`. *Hint*: You'll need to specify which columns are being gathered.\n>\n> ::: {.cell answer='true'}\n> <div class=\"accordion\">\n> <h3 class=\"toc-ignore\">Answer</h3>\n> <div style=\"background: #fff;\">\n> \n> ```{.r .cell-code}\n> surveys_long <- surveys %>%\n>   gather(\"measurement\", \"value\", hindfoot_length, weight)\n> ```\n> \n> </div>\n> </div>\n> :::\n>\n> 4. With this new data set, calculate the average of each\n>    `measurement` in each `year` for each different `plot_type`. Then\n>    `spread()` them into a data set with a column for `hindfoot_length` and\n>    `weight`. *Hint*: You only need to specify the key and value\n>    columns for `spread()`.\n>\n> ::: {.cell answer='true'}\n> <div class=\"accordion\">\n> <h3 class=\"toc-ignore\">Answer</h3>\n> <div style=\"background: #fff;\">\n> \n> ```{.r .cell-code}\n> surveys_long %>%\n>   group_by(year, measurement, plot_type) %>%\n>   summarize(mean_value = mean(value, na.rm=TRUE)) %>%\n>   spread(measurement, mean_value)\n> ```\n> \n> ::: {.cell-output .cell-output-stderr}\n> ```\n> #> `summarise()` has grouped output by 'year', 'measurement'. You can override\n> #> using the `.groups` argument.\n> ```\n> :::\n> \n> </div>\n> </div>\n> :::\n\n\n::: {.cell}\n\n:::\n\n\n# Exporting data\n\nNow that you have learned how to use **`dplyr`** to extract information from\nor summarize your raw data, you may want to export these new data sets to share\nthem with your collaborators or for archival.\n\nSimilar to the `read_csv()` function used for reading CSV files into R, there is\na `write_csv()` function that generates CSV files from data frames.\n\nBefore using `write_csv()`, we are going to create a new folder, `data`,\nin our working directory that will store this generated dataset. We don't want\nto write generated datasets in the same directory as our raw data. It's good\npractice to keep them separate. The `data_raw` folder should only contain the raw,\nunaltered data, and should be left alone to make sure we don't delete or modify\nit. In contrast, our script will generate the contents of the `data`\ndirectory, so even if the files it contains are deleted, we can always\nre-generate them.\n\nIn preparation for our next lesson on plotting, we are going to prepare a\ncleaned up version of the data set that doesn't include any missing data.\n\nLet's start by removing observations of animals for which `weight` and `hindfoot_length` are missing, or the `sex` has not been determined:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys_complete <- surveys %>%\n  filter(!is.na(weight),           # remove missing weight\n         !is.na(hindfoot_length),  # remove missing hindfoot_length\n         !is.na(sex))                # remove missing sex\n```\n:::\n\n\nBecause we are interested in plotting how species abundances have changed\nthrough time, we are also going to remove observations for rare species (i.e.,\nthat have been observed less than 50 times). We will do this in two steps: first\nwe are going to create a data set that counts how often each species has been\nobserved, and filter out the rare species; then, we will extract only the\nobservations for these more common species:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Extract the most common species_id\nspecies_counts <- surveys_complete %>%\n    count(species_id) %>%\n    filter(n >= 50)\n\n## Only keep the most common species\nsurveys_complete <- surveys_complete %>%\n  filter(species_id %in% species_counts$species_id)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nTo make sure that everyone has the same data set, check that `surveys_complete`\nhas 30463 rows and 13 columns by\ntyping `dim(surveys_complete)`.\n\nNow that our data set is ready, we can save it as a CSV file in our `data`\nfolder.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(surveys_complete, file = \"data/surveys_complete.csv\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n<p style=\"text-align: right; font-size: small;\">Page built on: 📆 2022-06-28 ‒ 🕢 17:23:28</p>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}