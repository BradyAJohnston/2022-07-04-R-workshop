{
  "hash": "99662de3785c40fb3676988c6f77eaae",
  "result": {
    "markdown": "---\ntitle: Manipulating, analyzing and exporting data with tidyverse\nauthor: Data Carpentry contributors\neditor_options: \n  markdown: \n    wrap: 72\n---\n\n::: {.cell}\n\n:::\n\n\n### Manipulating and analyzing data with dplyr\n\n------------------------------------------------------------------------\n\n:::{.blockquote}\n\n### Learning Objectives\n\n -   Describe the purpose of the **`dplyr`** and **`tidyr`** packages.\n -   Select certain columns in a data frame with the **`dplyr`**\n     function `select`.\n -   Extract certain rows in a data frame according to logical\n     (boolean) conditions with the **`dplyr`** function `filter` .\n -   Link the output of one **`dplyr`** function to the input of\n     another function with the 'pipe' operator `%>%`.\n -   Add new columns to a data frame that are functions of existing\n     columns with `mutate`.\n -   Use the split-apply-combine concept for data analysis.\n -   Use `summarize`, `group_by`, and `count` to split a data frame\n     into groups of observations, apply summary statistics for each\n     group, and then combine the results.\n -   Describe the concept of a wide and a long table format and for\n     which purpose those formats are useful.\n -   Describe what key-value pairs are.\n -   Reshape a data frame from long to wide format and back with the\n     `pivot_wider` and `pivot_longer` commands from the **`tidyr`**\n     package.\n -   Export a data frame to a .csv file.\n \n:::\n------------------------------------------------------------------------\n\n# Data manipulation using **`dplyr`** and **`tidyr`**\n\nBracket subsetting is handy, but it can be cumbersome and difficult to\nread, especially for complicated operations. Enter **`dplyr`**.\n**`dplyr`** is a package for helping with tabular data manipulation. It\npairs nicely with **`tidyr`** which enables you to swiftly convert\nbetween different data formats for plotting and analysis.\n\nThe **`tidyverse`** package is an \"umbrella-package\" that installs\n**`tidyr`**, **`dplyr`**, and several other useful packages for data\nanalysis, such as **`ggplot2`**, **`tibble`**, etc.\n\nThe **`tidyverse`** package tries to address 3 common issues that arise\nwhen doing data analysis in R:\n\n1.  The results from a base R function sometimes depend on the type of\n    data.\n2.  R expressions are used in a non standard way, which can be confusing\n    for new learners.\n3.  The existence of hidden arguments having default operations that new\n    learners are not aware of.\n\nYou should already have installed and loaded the **`tidyverse`**\npackage. If you haven't already done so, you can type\n`install.packages(\"tidyverse\")` straight into the console. Then, type\n`library(tidyverse)` to load the package.\n\n## What are **`dplyr`** and **`tidyr`**?\n\nThe package **`dplyr`** provides helper tools for the most common data\nmanipulation tasks. It is built to work directly with data frames, with\nmany common tasks optimized by being written in a compiled language\n(C++). An additional feature is the ability to work directly with data\nstored in an external database. The benefits of doing this are that the\ndata can be managed natively in a relational database, queries can be\nconducted on that database, and only the results of the query are\nreturned.\n\nThis addresses a common problem with R in that all operations are\nconducted in-memory and thus the amount of data you can work with is\nlimited by available memory. The database connections essentially remove\nthat limitation in that you can connect to a database of many hundreds\nof GB, conduct queries on it directly, and pull back into R only what\nyou need for analysis.\n\nThe package **`tidyr`** addresses the common problem of wanting to\nreshape your data for plotting and usage by different R functions. For\nexample, sometimes we want data sets where we have one row per\nmeasurement. Other times we want a data frame where each measurement\ntype has its own column, and rows are instead more aggregated groups\n(e.g., a time period, an experimental unit like a plot or a batch\nnumber). Moving back and forth between these formats is non-trivial, and\n**`tidyr`** gives you tools for this and more sophisticated data\nmanipulation.\n\nTo learn more about **`dplyr`** and **`tidyr`** after the workshop, you\nmay want to check out this [handy data transformation with **`dplyr`**\ncheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-transformation.pdf)\nand this [one about\n**`tidyr`**](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-import.pdf).\n\nAs before, we'll read in our data using the `read_csv()` function from\nthe tidyverse package **`readr`**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys <- read_csv(\"data_raw/portal_data_joined.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 34786 Columns: 13\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr (6): species_id, sex, genus, species, taxa, plot_type\n#> dbl (7): record_id, month, day, year, plot_id, hindfoot_length, weight\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## inspect the data\nstr(surveys)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## preview the data\nview(surveys)\n```\n:::\n\n\nNext, we're going to learn some of the most common **`dplyr`**\nfunctions:\n\n-   `select()`: subset columns\n-   `filter()`: subset rows on conditions\n-   `mutate()`: create new columns by using information from other\n    columns\n-   `group_by()` and `summarize()`: create summary statistics on grouped\n    data\n-   `arrange()`: sort results\n-   `count()`: count discrete values\n\n## Selecting columns and filtering rows\n\nTo select columns of a data frame, use `select()`. The first argument to\nthis function is the data frame (`surveys`), and the subsequent\narguments are the columns to keep.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(surveys, plot_id, species_id, weight)\n```\n:::\n\n\nTo select all columns *except* certain ones, put a \"-\" in front of the\nvariable to exclude it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(surveys, -record_id, -species_id)\n```\n:::\n\n\nThis will select all the variables in `surveys` except `record_id` and\n`species_id`.\n\nTo choose rows based on a specific criterion, use `filter()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(surveys, year == 1995)\n```\n:::\n\n\n## Pipes\n\nWhat if you want to select and filter at the same time? There are three\nways to do this: use intermediate steps, nested functions, or pipes.\n\nWith intermediate steps, you create a temporary data frame and use that\nas input to the next function, like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys2 <- filter(surveys, weight < 5)\nsurveys_sml <- select(surveys2, species_id, sex, weight)\n```\n:::\n\n\nThis is readable, but can clutter up your workspace with lots of objects\nthat you have to name individually. With multiple steps, that can be\nhard to keep track of.\n\nYou can also nest functions (i.e. one function inside of another), like\nthis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys_sml <- select(filter(surveys, weight < 5), species_id, sex, weight)\n```\n:::\n\n\nThis is handy, but can be difficult to read if too many functions are\nnested, as R evaluates the expression from the inside out (in this case,\nfiltering, then selecting).\n\nThe last option, *pipes*, are a recent addition to R. Pipes let you take\nthe output of one function and send it directly to the next, which is\nuseful when you need to do many things to the same dataset. Pipes in R\nlook like `%>%` and are made available via the **`magrittr`** package,\ninstalled automatically with **`dplyr`**. If you use RStudio, you can\ntype the pipe with <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>M</kbd> if\nyou have a PC or <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>M</kbd> if you\nhave a Mac.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  filter(weight < 5) %>%\n  select(species_id, sex, weight)\n```\n:::\n\n\nIn the above code, we use the pipe to send the `surveys` dataset first\nthrough `filter()` to keep rows where `weight` is less than 5, then\nthrough `select()` to keep only the `species_id`, `sex`, and `weight`\ncolumns. Since `%>%` takes the object on its left and passes it as the\nfirst argument to the function on its right, we don't need to explicitly\ninclude the data frame as an argument to the `filter()` and `select()`\nfunctions any more.\n\nSome may find it helpful to read the pipe like the word \"then.\" For\ninstance, in the example above, we took the data frame `surveys`, *then*\nwe `filter`ed for rows with `weight < 5`, *then* we `select`ed columns\n`species_id`, `sex`, and `weight`. The **`dplyr`** functions by\nthemselves are somewhat simple, but by combining them into linear\nworkflows with the pipe we can accomplish more complex manipulations of\ndata frames.\n\nIf we want to create a new object with this smaller version of the data,\nwe can assign it a new name:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys_sml <- surveys %>%\n  filter(weight < 5) %>%\n  select(species_id, sex, weight)\n\nsurveys_sml\n```\n:::\n\n\nNote that the final data frame is the leftmost part of this expression.\n\n:::{.blockquote}\n\n### Challenge {.challenge}\n\nUsing pipes, subset the `surveys` data to include animals collected\nbefore 1995 and retain only the columns `year`, `sex`, and `weight`.\n\n:::{.callout-tip collapse=true}\n\n#### Answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n    filter(year < 1995) %>%\n    select(year, sex, weight)\n```\n:::\n\n:::\n:::\n\n\n::: {.cell}\n\n:::\n\n\n### Mutate\n\nFrequently you'll want to create new columns based on the values in\nexisting columns, for example to do unit conversions, or to find the\nratio of values in two columns. For this we'll use `mutate()`.\n\nTo create a new column of weight in kg:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  mutate(weight_kg = weight / 1000)\n```\n:::\n\n\nYou can also create a second new column based on the first new column\nwithin the same call of `mutate()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  mutate(weight_kg = weight / 1000,\n         weight_lb = weight_kg * 2.2)\n```\n:::\n\n\nIf this runs off your screen and you just want to see the first few\nrows, you can use a pipe to view the `head()` of the data. (Pipes work\nwith non-**`dplyr`** functions, too, as long as the **`dplyr`** or\n`magrittr` package is loaded).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  mutate(weight_kg = weight / 1000) %>%\n  head()\n```\n:::\n\n\nThe first few rows of the output are full of `NA`s, so if we wanted to\nremove those we could insert a `filter()` in the chain:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  filter(!is.na(weight)) %>%\n  mutate(weight_kg = weight / 1000) %>%\n  head()\n```\n:::\n\n\n`is.na()` is a function that determines whether something is an `NA`.\nThe `!` symbol negates the result, so we're asking for every row where\nweight *is not* an `NA`.\n\n:::{.blockquote}\n\n### Challenge {.challenge}\n\nCreate a new data frame from the `surveys` data that meets the\nfollowing criteria: contains only the `species_id` column and a new\ncolumn called `hindfoot_cm` containing the `hindfoot_length` values\n(currently in mm) converted to centimeters. In this `hindfoot_cm`\ncolumn, there are no `NA`s and all values are less than 3.\n\n**Hint**: think about how the commands should be ordered to produce\nthis data frame!\n\n:::{.callout-tip collapse=true}\n\n### Answer\n\n\n```{reval=FALSE, purl=FALSE}\nsurveys_hindfoot_cm <- surveys %>%\n    filter(!is.na(hindfoot_length)) %>%\n    mutate(hindfoot_cm = hindfoot_length / 10) %>%\n    filter(hindfoot_cm < 3) %>%\n    select(species_id, hindfoot_cm)\n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n:::\n\n\n### Split-apply-combine data analysis and the `summarize()` function\n\nMany data analysis tasks can be approached using the\n*split-apply-combine* paradigm: split the data into groups, apply some\nanalysis to each group, and then combine the results. Key functions of\n**`dplyr`** for this workflow are `group_by()` and `summarize()`.\n\n#### The `group_by()` and `summarize()` functions\n\n`group_by()` is often used together with `summarize()`, which collapses\neach group into a single-row summary of that group. `group_by()` takes\nas arguments the column names that contain the **categorical** variables\nfor which you want to calculate the summary statistics. So to compute\nthe mean `weight` by sex:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  group_by(sex) %>%\n  summarize(mean_weight = mean(weight, na.rm = TRUE))\n```\n:::\n\n\nYou may also have noticed that the output from these calls doesn't run\noff the screen anymore. It's one of the advantages of `tbl_df` over data\nframe.\n\nYou can also group by multiple columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  group_by(sex, species_id) %>%\n  summarize(mean_weight = mean(weight, na.rm = TRUE)) %>%\n  tail()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `summarise()` has grouped output by 'sex'. You can override using the `.groups`\n#> argument.\n```\n:::\n:::\n\n\nHere, we used `tail()` to look at the last six rows of our summary.\nBefore, we had used `head()` to look at the first six rows. We can see\nthat the `sex` column contains `NA` values because some animals had\nescaped before their sex and body weights could be determined. The\nresulting `mean_weight` column does not contain `NA` but `NaN` (which\nrefers to \"Not a Number\") because `mean()` was called on a vector of\n`NA` values while at the same time setting `na.rm = TRUE`. To avoid\nthis, we can remove the missing values for weight before we attempt to\ncalculate the summary statistics on weight. Because the missing values\nare removed first, we can omit `na.rm = TRUE` when computing the mean:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  filter(!is.na(weight)) %>%\n  group_by(sex, species_id) %>%\n  summarize(mean_weight = mean(weight))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `summarise()` has grouped output by 'sex'. You can override using the `.groups`\n#> argument.\n```\n:::\n:::\n\n\nHere, again, the output from these calls doesn't run off the screen\nanymore. If you want to display more data, you can use the `print()`\nfunction at the end of your chain with the argument `n` specifying the\nnumber of rows to display:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  filter(!is.na(weight)) %>%\n  group_by(sex, species_id) %>%\n  summarize(mean_weight = mean(weight)) %>%\n  print(n = 15)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `summarise()` has grouped output by 'sex'. You can override using the `.groups`\n#> argument.\n```\n:::\n:::\n\n\nOnce the data are grouped, you can also summarize multiple variables at\nthe same time (and not necessarily on the same variable). For instance,\nwe could add a column indicating the minimum weight for each species for\neach sex:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  filter(!is.na(weight)) %>%\n  group_by(sex, species_id) %>%\n  summarize(mean_weight = mean(weight),\n            min_weight = min(weight))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `summarise()` has grouped output by 'sex'. You can override using the `.groups`\n#> argument.\n```\n:::\n:::\n\n\nIt is sometimes useful to rearrange the result of a query to inspect the\nvalues. For instance, we can sort on `min_weight` to put the lighter\nspecies first:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  filter(!is.na(weight)) %>%\n  group_by(sex, species_id) %>%\n  summarize(mean_weight = mean(weight),\n            min_weight = min(weight)) %>%\n  arrange(min_weight)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `summarise()` has grouped output by 'sex'. You can override using the `.groups`\n#> argument.\n```\n:::\n:::\n\n\nTo sort in descending order, we need to add the `desc()` function. If we\nwant to sort the results by decreasing order of mean weight:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  filter(!is.na(weight)) %>%\n  group_by(sex, species_id) %>%\n  summarize(mean_weight = mean(weight),\n            min_weight = min(weight)) %>%\n  arrange(desc(mean_weight))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `summarise()` has grouped output by 'sex'. You can override using the `.groups`\n#> argument.\n```\n:::\n:::\n\n\n#### Counting\n\nWhen working with data, we often want to know the number of observations\nfound for each factor or combination of factors. For this task,\n**`dplyr`** provides `count()`. For example, if we wanted to count the\nnumber of rows of data for each sex, we would do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n    count(sex)\n```\n:::\n\n\nThe `count()` function is shorthand for something we've already seen:\ngrouping by a variable, and summarizing it by counting the number of\nobservations in that group. In other words, `surveys %>% count()` is\nequivalent to:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n    group_by(sex) %>%\n    summarise(count = n())\n```\n:::\n\n\nFor convenience, `count()` provides the `sort` argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n    count(sex, sort = TRUE)\n```\n:::\n\n\nPrevious example shows the use of `count()` to count the number of\nrows/observations for *one* factor (i.e., `sex`). If we wanted to count\n*combination of factors*, such as `sex` and `species`, we would specify\nthe first and the second factor as the arguments of `count()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  count(sex, species)\n```\n:::\n\n\nWith the above code, we can proceed with `arrange()` to sort the table\naccording to a number of criteria so that we have a better comparison.\nFor instance, we might want to arrange the table above in (i) an\nalphabetical order of the levels of the species and (ii) in descending\norder of the count:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys %>%\n  count(sex, species) %>%\n  arrange(species, desc(n))\n```\n:::\n\n\nFrom the table above, we may learn that, for instance, there are 75\nobservations of the *albigula* species that are not specified for its\nsex (i.e. `NA`).\n\n> ### Challenge {.challenge}\n>\n> 1.  How many animals were caught in each `plot_type` surveyed?\n>\n> ::: {.cell answer='true'}\n> <div class=\"accordion\">\n> <h3 class=\"toc-ignore\">Answer</h3>\n> <div style=\"background: #fff;\">\n> \n> ```{.r .cell-code}\n> surveys %>%\n>     count(plot_type)\n> ```\n> \n> </div>\n> </div>\n> :::\n>\n> 2.  Use `group_by()` and `summarize()` to find the mean, min, and max\n>     hindfoot length for each species (using `species_id`). Also add\n>     the number of observations (hint: see `?n`).\n>\n> ::: {.cell answer='true'}\n> <div class=\"accordion\">\n> <h3 class=\"toc-ignore\">Answer</h3>\n> <div style=\"background: #fff;\">\n> \n> ```{.r .cell-code}\n> surveys %>%\n>     filter(!is.na(hindfoot_length)) %>%\n>     group_by(species_id) %>%\n>     summarize(\n>         mean_hindfoot_length = mean(hindfoot_length),\n>         min_hindfoot_length = min(hindfoot_length),\n>         max_hindfoot_length = max(hindfoot_length),\n>         n = n()\n>     )\n> ```\n> \n> </div>\n> </div>\n> :::\n>\n> 3.  What was the heaviest animal measured in each year? Return the\n>     columns `year`, `genus`, `species_id`, and `weight`.\n>\n> ::: {.cell answer='true'}\n> <div class=\"accordion\">\n> <h3 class=\"toc-ignore\">Answer</h3>\n> <div style=\"background: #fff;\">\n> \n> ```{.r .cell-code}\n> surveys %>%\n>     filter(!is.na(weight)) %>%\n>     group_by(year) %>%\n>     filter(weight == max(weight)) %>%\n>     select(year, genus, species, weight) %>%\n>     arrange(year)\n> ```\n> \n> </div>\n> </div>\n> :::\n\n\n::: {.cell}\n\n:::\n\n\n### Reshaping with `pivot_longer()` and `pivot_wider()`\n\nIn the [spreadsheet\nlesson](https://datacarpentry.org/spreadsheet-ecology-lesson/01-format-data/),\nwe discussed how to structure our data leading to the four rules\ndefining a tidy dataset:\n\n1.  Each variable has its own column\n2.  Each observation has its own row\n3.  Each value must have its own cell\n4.  Each type of observational unit forms a table\n\nHere we examine the fourth rule: Each type of observational unit forms a\ntable.\n\nIn `surveys`, the rows of `surveys` contain the values of variables\nassociated with each record (the unit), values such as the weight or sex\nof each animal associated with each record. What if instead of comparing\nrecords, we wanted to compare the different mean weight of each genus\nbetween plots? (Ignoring `plot_type` for simplicity).\n\nWe'd need to create a new table where each row (the unit) is comprised\nof values of variables associated with each plot. In practical terms\nthis means the values in `genus` would become the names of column\nvariables and the cells would contain the values of the mean weight\nobserved on each plot.\n\nHaving created a new table, it is therefore straightforward to explore\nthe relationship between the weight of different genera within, and\nbetween, the plots. The key point here is that we are still following a\ntidy data structure, but we have **reshaped** the data according to the\nobservations of interest: average genus weight per plot instead of\nrecordings per date.\n\nThe opposite transformation would be to transform column names into\nvalues of a variable.\n\nWe can do both these of transformations with two `tidyr` functions,\n`pivot_wider()` and `pivot_longer()`.\n\n::: callout-caution\nYou may find answers on stack-overflow and references to the `reshape`\npackage and `reshaep::melt()` and the `spread()` and `gather()`\nfunctions that still exist inside of `tidyr()` but have now been\nsuperseded by `pivot_wider()` and `pivot_longer()` respectively.\n\nYou should use `pivot_longer()` and `pivot_wider()` in your own work as\nthe older functions will eventually be removed from the `tidyr` package\nand your code will no longer run.\n:::\n\n#### Pivoting Wider\n\n`pivot_wider()` takes three principal arguments:\n\n1.  the data\n2.  the *names_from* column variable whose values will become new column\n    names.\\\n3.  the *values_from* column variable whose values will fill the new\n    column variables.\n\nFurther arguments include `values_fill` which, if set, fills in missing\nvalues with the value provided.\n\nLet's use `pivot_wider()` to transform surveys to find the mean weight\nof each genus in each plot over the entire survey period. We use\n`filter()`, `group_by()` and `summarise()` to filter our observations\nand variables of interest, and create a new variable for the\n`mean_weight`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys_gw <- surveys %>%\n  filter(!is.na(weight)) %>%\n  group_by(plot_id, genus) %>%\n  summarize(mean_weight = mean(weight))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `summarise()` has grouped output by 'plot_id'. You can override using the\n#> `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nstr(surveys_gw)\n```\n:::\n\n\nThis yields `surveys_gw` where the observations for each plot are spread\nacross multiple rows, 196 observations of 3 variables. Using `spread()`\nto key on `genus` with values from `mean_weight` this becomes 24\nobservations of 11 variables, one row for each plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys_spread <- surveys_gw %>%\n  pivot_wider(names_from = genus, values_from = mean_weight)\n\nstr(surveys_spread)\n```\n:::\n\n\n![](img/spread_data_R.png)\n\nWe could now plot comparisons between the weight of genera (one is\ncalled a genus, multiple are called genera) in different plots, although\nwe may wish to fill in the missing values first.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys_gw %>%\n  pivot_wider(names_from = genus, values_from = mean_weight, values_fill = 0) %>%\n  head()\n```\n:::\n\n\n#### Pivoting Longer\n\nThe opposing situation could occur if we had been provided with data in\nthe form of `surveys_spread`, where the genus names are column names,\nbut we wish to treat them as values of a genus variable instead.\n\nIn this situation we are gathering the column names and turning them\ninto a pair of new variables. One variable represents the column names\nas values, and the other variable contains the values previously\nassociated with the column names.\n\n`gather()` takes four principal arguments:\n\n1.  the data\n2.  the *key* column variable we wish to create from column names.\n3.  the *values* column variable we wish to create and fill with values\n    associated with the key.\n4.  the names of the columns we use to fill the key variable (or to\n    drop).\n\nTo recreate `surveys_gw` from `surveys_spread` we would create a key\ncalled `genus` and value called `mean_weight` and use all columns except\n`plot_id` for the key variable. Here we exclude `plot_id` from being\n`gather()`ed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys_gather <- surveys_spread %>%\n  pivot_longer(cols = -plot_id, values_to = \"mean_weight\", names_to = \"genus\")\n\nstr(surveys_gather)\n```\n:::\n\n\n![](img/gather_data_R.png)\n\nNote that now the `NA` genera are included in the re-gathered format.\nSpreading and then gathering can be a useful way to balance out a\ndataset so every replicate has the same composition.\n\nWe could also have used a specification for what columns to include.\nThis can be useful if you have a large number of identifying columns,\nand it allows you to type less in order to specify what to gather than\nwhat to leave alone. And if the columns are directly adjacent, we don't\neven need to list them all out - instead you can use the `:` operator!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys_spread %>%\n  pivot_longer(Baiomys:Spermophilus, values_to = \"mean_weight\", names_to = \"genus\") %>%\n  head()\n  \n# if you don't specify the column names, it will default to \"names\" and \"values\"\nsurveys_spread %>%\n  pivot_longer(Baiomys:Spermophilus) %>%\n  head()\n```\n:::\n\n\n> ### Challenge {.challenge}\n>\n> 1.  Spread the `surveys` data frame with `year` as columns, `plot_id`\n>     as rows, and the number of genera per plot as the values. You will\n>     need to summarize before reshaping, and use the function\n>     `n_distinct()` to get the number of unique genera within a\n>     particular chunk of data. It's a powerful function! See\n>     `?n_distinct` for more.\n>\n> ::: {.cell answer='true'}\n> <div class=\"accordion\">\n> <h3 class=\"toc-ignore\">Answer</h3>\n> <div style=\"background: #fff;\">\n> \n> ```{.r .cell-code}\n> surveys_spread_genera <- surveys %>%\n>   group_by(plot_id, year) %>%\n>   summarize(n_genera = n_distinct(genus)) %>%\n>   spread(year, n_genera)\n> ```\n> \n> ::: {.cell-output .cell-output-stderr}\n> ```\n> #> `summarise()` has grouped output by 'plot_id'. You can override using the\n> #> `.groups` argument.\n> ```\n> :::\n> \n> ```{.r .cell-code}\n> head(surveys_spread_genera)\n> ```\n> \n> </div>\n> </div>\n> :::\n>\n> 2.  Now take that data frame and `gather()` it again, so each row is a\n>     unique `plot_id` by `year` combination.\n>\n> ::: {.cell answer='true'}\n> <div class=\"accordion\">\n> <h3 class=\"toc-ignore\">Answer</h3>\n> <div style=\"background: #fff;\">\n> \n> ```{.r .cell-code}\n> surveys_spread_genera %>%\n>   gather(\"year\", \"n_genera\", -plot_id)\n> ```\n> \n> </div>\n> </div>\n> :::\n>\n> 3.  The `surveys` data set has two measurement columns:\n>     `hindfoot_length` and `weight`. This makes it difficult to do\n>     things like look at the relationship between mean values of each\n>     measurement per year in different plot types. Let's walk through a\n>     common solution for this type of problem. First, use `gather()` to\n>     create a dataset where we have a key column called `measurement`\n>     and a `value` column that takes on the value of either\n>     `hindfoot_length` or `weight`. *Hint*: You'll need to specify\n>     which columns are being gathered.\n>\n> :::{.callout-tip collapse='true'}\n>\n> ## Answer\n>\n> ::: {.cell answer='true'}\n> <div class=\"accordion\">\n> <h3 class=\"toc-ignore\">Answer</h3>\n> <div style=\"background: #fff;\">\n> \n> ```{.r .cell-code}\n> surveys_long <- surveys %>%\n>   gather(\"measurement\", \"value\", hindfoot_length, weight)\n> ```\n> \n> </div>\n> </div>\n> :::\n> :::\n>\n> 4.  With this new data set, calculate the average of each\n>     `measurement` in each `year` for each different `plot_type`. Then\n>     `spread()` them into a data set with a column for\n>     `hindfoot_length` and `weight`. *Hint*: You only need to specify\n>     the key and value columns for `spread()`.\n>\n> ::: {.cell answer='true'}\n> <div class=\"accordion\">\n> <h3 class=\"toc-ignore\">Answer</h3>\n> <div style=\"background: #fff;\">\n> \n> ```{.r .cell-code}\n> surveys_long %>%\n>   group_by(year, measurement, plot_type) %>%\n>   summarize(mean_value = mean(value, na.rm=TRUE)) %>%\n>   spread(measurement, mean_value)\n> ```\n> \n> ::: {.cell-output .cell-output-stderr}\n> ```\n> #> `summarise()` has grouped output by 'year', 'measurement'. You can override\n> #> using the `.groups` argument.\n> ```\n> :::\n> \n> </div>\n> </div>\n> :::\n\n\n::: {.cell}\n\n:::\n\n\n# Exporting data\n\nNow that you have learned how to use **`dplyr`** to extract information\nfrom or summarize your raw data, you may want to export these new data\nsets to share them with your collaborators or for archival.\n\nSimilar to the `read_csv()` function used for reading CSV files into R,\nthere is a `write_csv()` function that generates CSV files from data\nframes.\n\nBefore using `write_csv()`, we are going to create a new folder, `data`,\nin our working directory that will store this generated dataset. We\ndon't want to write generated datasets in the same directory as our raw\ndata. It's good practice to keep them separate. The `data_raw` folder\nshould only contain the raw, unaltered data, and should be left alone to\nmake sure we don't delete or modify it. In contrast, our script will\ngenerate the contents of the `data` directory, so even if the files it\ncontains are deleted, we can always re-generate them.\n\nIn preparation for our next lesson on plotting, we are going to prepare\na cleaned up version of the data set that doesn't include any missing\ndata.\n\nLet's start by removing observations of animals for which `weight` and\n`hindfoot_length` are missing, or the `sex` has not been determined:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys_complete <- surveys %>%\n  filter(!is.na(weight),           # remove missing weight\n         !is.na(hindfoot_length),  # remove missing hindfoot_length\n         !is.na(sex))                # remove missing sex\n```\n:::\n\n\nBecause we are interested in plotting how species abundances have\nchanged through time, we are also going to remove observations for rare\nspecies (i.e., that have been observed less than 50 times). We will do\nthis in two steps: first we are going to create a data set that counts\nhow often each species has been observed, and filter out the rare\nspecies; then, we will extract only the observations for these more\ncommon species:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Extract the most common species_id\nspecies_counts <- surveys_complete %>%\n    count(species_id) %>%\n    filter(n >= 50)\n\n## Only keep the most common species\nsurveys_complete <- surveys_complete %>%\n  filter(species_id %in% species_counts$species_id)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nTo make sure that everyone has the same data set, check that\n`surveys_complete` has 30463 rows and\n13 columns by typing `dim(surveys_complete)`.\n\nNow that our data set is ready, we can save it as a CSV file in our\n`data` folder.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(surveys_complete, file = \"data/surveys_complete.csv\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n<p style=\"text-align: right; font-size: small;\">Page built on: 📆 2022-06-29 ‒ 🕢 14:38:58</p>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}