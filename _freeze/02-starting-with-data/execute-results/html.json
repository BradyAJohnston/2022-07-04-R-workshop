{
  "hash": "d0e55d22e359862dde09873a9c1320b0",
  "result": {
    "markdown": "---\ntitle: \"Starting with data\"\nauthor: \"Data Carpentry contributors\"\nminutes: 20\n---\n\n::: {.cell}\n\n:::\n\n\n\n:::{.callout-tip icon=false}\n### Learning Objectives\n\n* Load external data from a .csv file into a data frame.\n* Install and load packages.\n* Describe what a data frame is.\n* Summarize the contents of a data frame.\n* Use indexing to subset specific portions of data frames. \n* Describe what a factor is.\n* Convert between strings and factors.\n* Reorder and rename factors.\n* Change how character strings are handled in a data frame.\n* Format dates.\n:::\n\n\n## Loading the survey data\n\n\n::: {.cell}\n\n:::\n\n\nWe are investigating the animal species diversity and weights found within plots \nat our study site. The dataset is stored as a comma separated value (CSV) file.\nEach row holds information for a single animal, and the columns represent:\n\n| Column           | Description                                  |\n|------------------|----------------------------------------------|\n| record\\_id       | Unique id for the observation                |\n| month            | month of observation                         |\n| day              | day of observation                           |\n| year             | year of observation                          |\n| plot\\_id         | ID of a particular experimental plot of land |\n| species\\_id      | 2-letter code                                |\n| sex              | sex of animal (\"M\", \"F\")                     |\n| hindfoot\\_length | length of the hindfoot in mm                 |\n| weight           | weight of the animal in grams                |\n| genus            | genus of animal                              |\n| species          | species of animal                            |\n| taxon            | e.g. Rodent, Reptile, Bird, Rabbit           |\n| plot\\_type       | type of plot                                 |\n\n### Downloading the data\n\nWe created the folder that will store the downloaded data (`data_raw`) in the chapter\n[\"Before we start\"](https://datacarpentry.org/R-ecology-lesson/00-before-we-start.html#Organizing_your_working_directory).\nIf you skipped that part, it may be a good idea to have a look now, to make\nsure your working directory is set up properly.\n\nWe are going to use the R function `download.file()` to download the CSV file\nthat contains the survey data from Figshare, and we will use `read_csv()` to\nload the content of the CSV file into R.\n\nInside the `download.file` command, the first entry is a character string with the\nsource URL (\"https://ndownloader.figshare.com/files/2292169\"). \nThis source URL downloads a CSV file from figshare. The text after the comma\n(\"data_raw/portal_data_joined.csv\") is the destination of the file on your local\nmachine. You'll need to have a folder on your machine called \"data_raw\" where \nyou'll download the file. So this command downloads a file from Figshare, names \nit \"portal_data_joined.csv\" and adds it to a preexisting folder named \"data_raw\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload.file(url = \"https://ndownloader.figshare.com/files/2292169\",\n              destfile = \"data_raw/portal_data_joined.csv\")\n```\n:::\n\n\n\n### Reading the data into R\n\nThe file has now been downloaded to the destination you specified, but R has not \nyet loaded the data from the file into memory. To do this, we can use the \n`read_csv()` function from the **`tidyverse`** package. \n\nPackages in R are basically sets of additional functions that let you do more\nstuff. The functions we've been using so far, like `round()`, `sqrt()`, or `c()`\ncome built into R. Packages give you access to additional functions beyond base R. \nA similar function to `read_csv()` from the tidyverse package is `read.csv()` from \nbase R. We don't have time to cover their differences but notice that the exact \nspelling determines which function is used.\nBefore you use a package for the first time you need to install it on your \nmachine, and then you should import it in every subsequent R session when you \nneed it. \n\nTo install the **`tidyverse`** package, we can type \n`install.packages(\"tidyverse\")` straight into the console. In fact, it's better \nto write this in the console than in our script for any package, as there's no \nneed to re-install packages every time we run the script. \nThen, to load the package type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## load the tidyverse packages, incl. dplyr\nlibrary(tidyverse)\n```\n:::\n\n\nNow we can use the functions from the **`tidyverse`** package. \nLet's use `read_csv()` to read the data into a data frame \n(we will learn more about data frames later):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys <- read_csv(\"data_raw/portal_data_joined.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 34786 Columns: 13\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr (6): species_id, sex, genus, species, taxa, plot_type\n#> dbl (7): record_id, month, day, year, plot_id, hindfoot_length, weight\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nWhen you execute `read_csv` on a data file, it looks through the first 1000 rows \nof each column and guesses its data type. For example, in this dataset,\n`read_csv()` reads `weight` as `col_double` (a numeric data type), and `species` \nas `col_character`. You have the option to specify the data type for a column\nmanually by using the `col_types` argument in `read_csv`.\n\n:::{.callout-note}\n### Note\n\n`read_csv()` assumes that fields are delineated by commas. However, in several\ncountries, the comma is used as a decimal separator and the semicolon (;) is\nused as a field delineator. If you want to read in this type of files in R,\nyou can use the `read_csv2()` function. It behaves like `read_csv()` but\nuses different parameters for the decimal and the field separators. \nThere is also the `read_tsv()` for tab separated data files and `read_delim()` \nfor less common formats.\nCheck out the help for `read_csv()` by typing `?read_csv` to learn more. \n\nIn addition to the above versions of the csv format, you should develop the habits\nof looking at and recording some parameters of your csv files. For instance, \nthe character encoding, control characters used for line ending, date format\n(if the date is not split into three variables), and the presence of unexpected\n[newlines](https://en.wikipedia.org/wiki/Newline) are important characteristics of your data files.\nThose parameters will ease up the import step of your data in R.\n\n:::\n\nWe can see the contents of the first few lines of the data by typing its \nname: `surveys`. By default, this will show you as many rows and columns of\nthe data as fit on your screen. \nIf you wanted the first 50 rows, you could type `print(surveys, n = 50)`\n\nWe can also extract the first few lines of this data using the function \n`head()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(surveys)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 6 × 13\n#>   record_id month   day  year plot_id speci…¹ sex   hindf…² weight genus species\n#>       <dbl> <dbl> <dbl> <dbl>   <dbl> <chr>   <chr>   <dbl>  <dbl> <chr> <chr>  \n#> 1         1     7    16  1977       2 NL      M          32     NA Neot… albigu…\n#> 2        72     8    19  1977       2 NL      M          31     NA Neot… albigu…\n#> 3       224     9    13  1977       2 NL      <NA>       NA     NA Neot… albigu…\n#> 4       266    10    16  1977       2 NL      <NA>       NA     NA Neot… albigu…\n#> 5       349    11    12  1977       2 NL      <NA>       NA     NA Neot… albigu…\n#> 6       363    11    12  1977       2 NL      <NA>       NA     NA Neot… albigu…\n#> # … with 2 more variables: taxa <chr>, plot_type <chr>, and abbreviated\n#> #   variable names ¹​species_id, ²​hindfoot_length\n```\n:::\n:::\n\n\nUnlike the `print()` function, `head()` returns the extracted data. You could \nuse it to assign the first 100 rows of `surveys` to an object using \n`surveys_sample <- head(surveys, 100)`. This can be useful if you want to try \nout complex computations on a subset of your data before you apply them to the\nwhole data set. \nThere is a similar function that lets you extract the last few lines of the data \nset. It is called (you might have guessed it) `tail()`.\n\nTo open the dataset in RStudio's Data Viewer, use the `view()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nview(surveys)\n```\n:::\n\n\n:::{.callout-note}\n### Note\n \nThere are two functions for viewing which are case-sensitive. Using `view()` with a \nlowercase 'v' is part of tidyverse, whereas using `View()` with an uppercase 'V' is \nloaded through base R in the `utils` package.\n:::\n\n\n## What are data frames?\n\nWhen we loaded the data into R, it got stored as an object of class `tibble`, \nwhich is a special kind of data frame (the difference is not important for our \npurposes, but you can learn more about tibbles \n[here](https://tibble.tidyverse.org/)). \nData frames are the _de facto_ data structure for most tabular data, and what we\nuse for statistics and plotting.\nData frames can be created by hand, but most commonly they are generated by\nfunctions like `read_csv()`; in other words, when importing\nspreadsheets from your hard drive or the web.\n\nA data frame is the representation of data in the format of a table where the\ncolumns are vectors that all have the same length. Because columns are\nvectors, each column must contain a single type of data (e.g., characters, integers,\nfactors). For example, here is a figure depicting a data frame comprising a\nnumeric, a character, and a logical vector.\n\n![](./img/data-frame.svg)\n\nWe can see this also when inspecting the <b>str</b>ucture of a data frame\nwith the function `str()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(surveys)\n```\n:::\n\n \n## Inspecting data frames\n\nWe already saw how the functions `head()` and `str()` can be useful to check the\ncontent and the structure of a data frame. Here is a non-exhaustive list of\nfunctions to get a sense of the content/structure of the data. Let's try them out!\n\n* Size:\n    * `dim(surveys)` - returns a vector with the number of rows in the first element,\n          and the number of columns as the second element (the **dim**ensions of\n          the object)\n    * `nrow(surveys)` - returns the number of rows\n    * `ncol(surveys)` - returns the number of columns\n\n* Content:\n    * `head(surveys)` - shows the first 6 rows\n    * `tail(surveys)` - shows the last 6 rows\n\n* Names:\n    * `names(surveys)` - returns the column names (synonym of `colnames()` for `data.frame`\n\t   objects)\n    * `rownames(surveys)` - returns the row names\n\n* Summary:\n    * `str(surveys)` - structure of the object and information about the class, length and\n\t   content of  each column\n    * `summary(surveys)` - summary statistics for each column\n\nNote: most of these functions are \"generic\", they can be used on other types of\nobjects besides `data.frame`.\n\n:::{.callout-warning icon=false}\n### Challenge\n\nBased on the output of `str(surveys)`, can you answer the following questions?\n\n* What is the class of the object `surveys`?\n* How many rows and how many columns are in this object?\n\n:::{.callout-tip collapse=true icon=false}\n\n### Answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(surveys)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> spec_tbl_df [34,786 × 13] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n#>  $ record_id      : num [1:34786] 1 72 224 266 349 363 435 506 588 661 ...\n#>  $ month          : num [1:34786] 7 8 9 10 11 11 12 1 2 3 ...\n#>  $ day            : num [1:34786] 16 19 13 16 12 12 10 8 18 11 ...\n#>  $ year           : num [1:34786] 1977 1977 1977 1977 1977 ...\n#>  $ plot_id        : num [1:34786] 2 2 2 2 2 2 2 2 2 2 ...\n#>  $ species_id     : chr [1:34786] \"NL\" \"NL\" \"NL\" \"NL\" ...\n#>  $ sex            : chr [1:34786] \"M\" \"M\" NA NA ...\n#>  $ hindfoot_length: num [1:34786] 32 31 NA NA NA NA NA NA NA NA ...\n#>  $ weight         : num [1:34786] NA NA NA NA NA NA NA NA 218 NA ...\n#>  $ genus          : chr [1:34786] \"Neotoma\" \"Neotoma\" \"Neotoma\" \"Neotoma\" ...\n#>  $ species        : chr [1:34786] \"albigula\" \"albigula\" \"albigula\" \"albigula\" ...\n#>  $ taxa           : chr [1:34786] \"Rodent\" \"Rodent\" \"Rodent\" \"Rodent\" ...\n#>  $ plot_type      : chr [1:34786] \"Control\" \"Control\" \"Control\" \"Control\" ...\n#>  - attr(*, \"spec\")=\n#>   .. cols(\n#>   ..   record_id = col_double(),\n#>   ..   month = col_double(),\n#>   ..   day = col_double(),\n#>   ..   year = col_double(),\n#>   ..   plot_id = col_double(),\n#>   ..   species_id = col_character(),\n#>   ..   sex = col_character(),\n#>   ..   hindfoot_length = col_double(),\n#>   ..   weight = col_double(),\n#>   ..   genus = col_character(),\n#>   ..   species = col_character(),\n#>   ..   taxa = col_character(),\n#>   ..   plot_type = col_character()\n#>   .. )\n#>  - attr(*, \"problems\")=<externalptr>\n```\n:::\n\n```{.r .cell-code}\n## * class: data frame\n## * how many rows: 34786,  how many columns: 13\n```\n:::\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## Indexing and subsetting data frames\n\n\n::: {.cell}\n\n:::\n\n\n\nOur survey data frame has rows and columns (it has 2 dimensions), if we want to\nextract some specific data from it, we need to specify the \"coordinates\" we\nwant from it. Row numbers come first, followed by column numbers. However, note\nthat different ways of specifying these coordinates lead to results with\ndifferent classes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# We can extract specific values by specifying row and column indices\n# in the format: \n# data_frame[row_index, column_index]\n# For instance, to extract the first row and column from surveys:\nsurveys[1, 1]\n\n# First row, sixth column:\nsurveys[1, 6]   \n\n# We can also use shortcuts to select a number of rows or columns at once\n# To select all columns, leave the column index blank\n# For instance, to select all columns for the first row:\nsurveys[1, ]\n\n# The same shortcut works for rows --\n# To select the first column across all rows:\nsurveys[, 1]\n\n# An even shorter way to select first column across all rows:\nsurveys[1] # No comma! \n\n# To select multiple rows or columns, use vectors!\n# To select the first three rows of the 5th and 6th column\nsurveys[c(1, 2, 3), c(5, 6)] \n\n# We can use the : operator to create those vectors for us:\nsurveys[1:3, 5:6] \n\n# This is equivalent to head_surveys <- head(surveys)\nhead_surveys <- surveys[1:6, ]\n\n# As we've seen, when working with tibbles \n# subsetting with single square brackets (\"[]\") always returns a data frame.\n# If you want a vector, use double square brackets (\"[[]]\")\n\n# For instance, to get the first column as a vector:\nsurveys[[1]]\n\n# To get the first value in our data frame:\nsurveys[[1, 1]]\n```\n:::\n\n\n`:` is a special function that creates numeric vectors of integers in increasing\nor decreasing order, test `1:10` and `10:1` for instance.\n\nYou can also exclude certain indices of a data frame using the \"`-`\" sign:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys[, -1]                 # The whole data frame, except the first column\nsurveys[-(7:nrow(surveys)), ] # Equivalent to head(surveys)\n```\n:::\n\n\nData frames can be subset by calling indices (as shown previously), but also by calling their column names directly:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# As before, using single brackets returns a data frame:\nsurveys[\"species_id\"]\nsurveys[, \"species_id\"]\n\n# Double brackets returns a vector:\nsurveys[[\"species_id\"]]\n\n# We can also use the $ operator with column names instead of double brackets\n# This returns a vector:\nsurveys$species_id\n```\n:::\n\n\nIn RStudio, you can use the autocompletion feature to get the full and correct names of the columns.\n\n:::{.callout-warning icon=false}\n\n### Challenge\n\n1. Create a `data.frame` (`surveys_200`) containing only the data in\n   row 200 of the `surveys` dataset.\n\n2. Notice how `nrow()` gave you the number of rows in a `data.frame`?\n\n     * Use that number to pull out just that last row from the `surveys` dataset.\n     * Compare that with what you see as the last row using `tail()` to make\n       sure it's meeting expectations.\n     * Pull out that last row using `nrow()` instead of the row number.\n     * Create a new data frame (`surveys_last`) from that last row.\n\n3. Use `nrow()` to extract the row that is in the middle of the data\n   frame. Store the content of this row in an object named `surveys_middle`.\n\n4. Combine `nrow()` with the `-` notation above to reproduce the behavior of\n   `head(surveys)`, keeping just the first through 6th rows of the surveys\n   dataset.\n   \n:::{.callout-tip collapse=true icon=false}\n\n### Answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## 1.\nsurveys_200 <- surveys[200, ]\n## 2.\n# Saving `n_rows` to improve readability and reduce duplication\nn_rows <- nrow(surveys)\nsurveys_last <- surveys[n_rows, ]\n## 3.\nsurveys_middle <- surveys[n_rows / 2, ]\n## 4.\nsurveys_head <- surveys[-(7:n_rows), ]\n```\n:::\n\n:::\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n## Factors\n\n\n::: {.cell}\n\n:::\n\n\nWhen we did `str(surveys)` we saw that several of the columns consist of\nintegers. The columns `genus`, `species`, `sex`, `plot_type`, ... however, are\nof the class `character`.\nArguably, these columns contain categorical data, that is, they can only take on\na limited number of values. \n\nR has a special class for working with categorical data, called `factor`. \nFactors are very useful and actually contribute to making R particularly well \nsuited to working with data. So we are going to spend a little time introducing \nthem.\n\nOnce created, factors can only contain a pre-defined set of values, known as\n*levels*. \nFactors are stored as integers associated with labels and they can be ordered or unordered. While factors look (and often behave) like character vectors, they are actually treated as integer vectors by R. So you need to be very careful when treating them as strings.\n\nWhen importing a data frame with `read_csv()`, the columns that contain text are not automatically coerced (=converted) into the `factor` data type, but once we have\nloaded the data we can do the conversion using the `factor()` function: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys$sex <- factor(surveys$sex)\n```\n:::\n\n\nWe can see that the conversion has worked by using the `summary()` \nfunction again. This produces a table with the counts for each factor level:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(surveys$sex)\n```\n:::\n\n\nBy default, R always sorts levels in alphabetical order. For\ninstance, if you have a factor with 2 levels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsex <- factor(c(\"male\", \"female\", \"female\", \"male\"))\n```\n:::\n\n\nR will assign `1` to the level `\"female\"` and `2` to the level `\"male\"` (because\n`f` comes before `m`, even though the first element in this vector is\n`\"male\"`). You can see this by using the function `levels()` and you can find the\nnumber of levels using `nlevels()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(sex)\nnlevels(sex)\n```\n:::\n\n\nSometimes, the order of the factors does not matter, other times you might want\nto specify the order because it is meaningful (e.g., \"low\", \"medium\", \"high\"),\nit improves your visualization, or it is required by a particular type of\nanalysis. Here, one way to reorder our levels in the `sex` vector would be:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsex # current order\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] male   female female male  \n#> Levels: female male\n```\n:::\n\n```{.r .cell-code}\nsex <- factor(sex, levels = c(\"male\", \"female\"))\nsex # after re-ordering\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] male   female female male  \n#> Levels: male female\n```\n:::\n:::\n\n\nIn R's memory, these factors are represented by integers (1, 2, 3), but are more\ninformative than integers because factors are self describing: `\"female\"`,\n`\"male\"` is more descriptive than `1`, `2`. Which one is \"male\"?  You wouldn't\nbe able to tell just from the integer data. Factors, on the other hand, have\nthis information built in. It is particularly helpful when there are many levels\n(like the species names in our example dataset).\n\n:::{.callout-warning icon=false}\n### Challenge\n\n1. Change the columns `taxa` and `genus` in the `surveys` data frame into a \n   factor.\n\n2. Using the functions you learned before, can you find out...\n\n     * How many rabbits were observed?\n     * How many different genera are in the `genus` column?\n     \n:::{.callout-tip icon=false collapse=true}\n\n### Answer \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys$taxa <- factor(surveys$taxa)\nsurveys$genus <- factor(surveys$genus)\nsummary(surveys)\nnlevels(surveys$genus)\n\n## * how many genera: There are 26 unique genera in the `genus` column.\n## * how many rabbts: There are 75 rabbits in the `taxa` column.\n```\n:::\n\n:::\n:::\n\n\n::: {.cell}\n\n:::\n\n\n\n### Converting factors\n\nIf you need to convert a factor to a character vector, you use\n`as.character(x)`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.character(sex)\n```\n:::\n\n\nIn some cases, you may have to convert factors where the levels appear as\nnumbers (such as concentration levels or years) to a numeric vector. For\ninstance, in one part of your analysis the years might need to be encoded as\nfactors (e.g., comparing average weights across years) but in another part of\nyour analysis they may need to be stored as numeric values (e.g., doing math\noperations on the years). This conversion from factor to numeric is a little\ntrickier. The `as.numeric()` function returns the index values of the factor,\nnot its levels, so it will result in an entirely new (and unwanted in this case)\nset of numbers. One method to avoid this is to convert factors to characters,\nand then to numbers.\n\nAnother method is to use the `levels()` function. Compare:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyear_fct <- factor(c(1990, 1983, 1977, 1998, 1990))\nas.numeric(year_fct)               # Wrong! And there is no warning...\nas.numeric(as.character(year_fct)) # Works...\nas.numeric(levels(year_fct))[year_fct]    # The recommended way.\n```\n:::\n\n\nNotice that in the `levels()` approach, three important steps occur:\n\n* We obtain all the factor levels using `levels(year_fct)`\n* We convert these levels to numeric values using `as.numeric(levels(year_fct))`\n* We then access these numeric values using the underlying integers of the\n  vector `year_fct` inside the square brackets\n\n### Renaming factors\n\nWhen your data is stored as a factor, you can use the `plot()` function to get a\nquick glance at the number of observations represented by each factor\nlevel. Let's look at the number of males and females captured over the course of\nthe experiment:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## bar plot of the number of females and males captured during the experiment:\nplot(surveys$sex)\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\nHowever, as we saw when we used `summary(surveys$sex)`, there are about 1700 \nindividuals for which the sex information hasn't been recorded. To show them in\nthe plot, we can turn the missing values into a factor level with the \n`addNA()` function. We will also have to give the new factor level a label.\nWe are going to work with a copy of the `sex` column, so we're not modifying the \nworking copy of the data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsex <- surveys$sex\nlevels(sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"F\" \"M\"\n```\n:::\n\n```{.r .cell-code}\nsex <- addNA(sex)\nlevels(sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"F\" \"M\" NA\n```\n:::\n\n```{.r .cell-code}\nhead(sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] M    M    <NA> <NA> <NA> <NA>\n#> Levels: F M <NA>\n```\n:::\n\n```{.r .cell-code}\nlevels(sex)[3] <- \"undetermined\"\nlevels(sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"F\"            \"M\"            \"undetermined\"\n```\n:::\n\n```{.r .cell-code}\nhead(sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] M            M            undetermined undetermined undetermined\n#> [6] undetermined\n#> Levels: F M undetermined\n```\n:::\n:::\n\n\nNow we can plot the data again, using `plot(sex)`.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/R-ecology-unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n:::{.callout-warning icon=false}\n\n### Challenge\n\n* Rename \"F\" and \"M\" to \"female\" and \"male\" respectively.\n* Now that we have renamed the factor level to \"undetermined\", can you recreate the barplot such that \"undetermined\" is first (before \"female\")?\n\n:::{.callout-tip icon=false collapse=true}\n\n### Answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(sex)[1:2] <- c(\"female\", \"male\")\nsex <- factor(sex, levels = c(\"undetermined\", \"female\", \"male\"))\nplot(sex)\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n:::\n:::\n\n\n::: {.cell}\n\n:::\n\n\n\n:::{.callout-warning icon=false}\n\n### Challenge\n\n1. We have seen how data frames are created when using `read_csv()`, but\n  they can also be created by hand with the `data.frame()` function.  There are\n  a few mistakes in this hand-crafted `data.frame`. Can you spot and fix them?\n  Don't hesitate to experiment!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanimal_data <- data.frame(\n    animal = c(dog, cat, sea cucumber, sea urchin),\n    feel = c(\"furry\", \"squishy\", \"spiny\"),\n    weight = c(45, 8 1.1, 0.8)\n    )\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n2. Can you predict the class for each of the columns in the following example?\n   Check your guesses using `str(country_climate)`:\n     * Are they what you expected?  Why? Why not?\n     * What would you need to change to ensure that each column had the accurate data type?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_climate <- data.frame(\n    country = c(\"Canada\", \"Panama\", \"South Africa\", \"Australia\"),\n    climate = c(\"cold\", \"hot\", \"temperate\", \"hot/temperate\"),\n    temperature = c(10, 30, 18, \"15\"),\n    northern_hemisphere = c(TRUE, TRUE, FALSE, \"FALSE\"),\n    has_kangaroo = c(FALSE, FALSE, FALSE, 1)\n    )\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n:::{.callout-tip icon=false collapse=true}\n\n### Answer\n\n* missing quotations around the names of the animals\n* missing one entry in the `feel` column (probably for one of the furry animals)\n* missing one comma in the `weight` column\n* `country`, `climate`, `temperature`, and `northern_hemisphere` are\n   characters; `has_kangaroo` is numeric\n* using `factor()` one could replace character columns with factors columns\n* removing the quotes in `temperature` and `northern_hemisphere` and replacing 1\n   by TRUE in the `has_kangaroo` column would give what was probably \n   intended\n:::\n:::\n\n\nThe automatic conversion of data type is sometimes a blessing, sometimes an\nannoyance. Be aware that it exists, learn the rules, and double check that data\nyou import in R are of the correct type within your data frame. If not, use it\nto your advantage to detect mistakes that might have been introduced during data\nentry (for instance, a letter in a column that should only contain numbers).\n\nLearn more in this [RStudio tutorial](https://support.rstudio.com/hc/en-us/articles/218611977-Importing-Data-with-RStudio)\n\n## Formatting dates\n\nA common issue that new (and experienced!) R users have is\nconverting date and time information into a variable that is suitable for \nanalyses. One way to store date information is to store each component of the \ndate in a separate column. Using `str()`, we can confirm that our data frame \ndoes indeed have a separate column for day, month, and year, and that each of \nthese columns contains integer values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(surveys)\n```\n:::\n\n\nWe are going to use the `ymd()` function from the package **`lubridate`** (which belongs to the **`tidyverse`**; learn more [here](https://www.tidyverse.org/)). **`lubridate`** gets installed as part as the **`tidyverse`** installation. When you load  the **`tidyverse`** (`library(tidyverse)`), the core packages (the packages used in most data analyses) get loaded. **`lubridate`** however does not belong to the core tidyverse, so you have to load it explicitly with `library(lubridate)`\n\nStart by loading the required package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\n```\n:::\n\n\nThe **`lubridate`** package has many useful functions for working with dates. \nThese can help you extract dates from different string representations, \nconvert between timezones, calculate time differences and more. You can find \nan overview of them in the [lubridate cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/lubridate.pdf).\n\nHere we will use the function `ymd()`, which takes a vector representing year, \nmonth, and day, and converts it to a `Date` vector. \n`Date` is a class of data recognized by R as being a date and can\nbe manipulated as such. The argument that the function requires is flexible,\nbut, as a best practice, is a character vector formatted as \"YYYY-MM-DD\".\n\nLet's create a date object and inspect the structure:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_date <- ymd(\"2015-01-01\")\nstr(my_date)\n```\n:::\n\n\nNow let's paste the year, month, and day separately - we get the same result:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# sep indicates the character to use to separate each component\nmy_date <- ymd(paste(\"2015\", \"1\", \"1\", sep = \"-\")) \nstr(my_date)\n```\n:::\n\n\nNow we apply this function to the surveys dataset. Create a character vector from the `year`, `month`, and `day` columns of\n`surveys` using `paste()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npaste(surveys$year, surveys$month, surveys$day, sep = \"-\")\n```\n:::\n\n\nThis character vector can be used as the argument for `ymd()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nymd(paste(surveys$year, surveys$month, surveys$day, sep = \"-\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: 129 failed to parse.\n```\n:::\n:::\n\n\nThere is a warning telling us that some dates could not be parsed (understood)\nby the `ymd()` function. For these dates, the function has returned `NA`, which\nmeans they are treated as missing values.\nWe will deal with this problem later, but first we add the resulting `Date`\nvector to the `surveys` data frame as a new column called `date`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys$date <- ymd(paste(surveys$year, surveys$month, surveys$day, sep = \"-\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: 129 failed to parse.\n```\n:::\n\n```{.r .cell-code}\nstr(surveys) # notice the new column, with 'date' as the class\n```\n:::\n\n\nLet's make sure everything worked correctly. One way to inspect the new column is to use `summary()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(surveys$date)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>         Min.      1st Qu.       Median         Mean      3rd Qu.         Max. \n#> \"1977-07-16\" \"1984-03-12\" \"1990-07-22\" \"1990-12-15\" \"1997-07-29\" \"2002-12-31\" \n#>         NA's \n#>        \"129\"\n```\n:::\n:::\n\n\nLet's investigate why some dates could not be parsed.\n\nWe can use the functions we saw previously to deal with missing data to identify\nthe rows in our data frame that are failing. If we combine them with what we learned about subsetting data frames earlier, we can extract the columns \"year, \"month\", \"day\" from the records that have `NA` in our new column `date`. We will also use `head()` so we don't clutter the output:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_dates <- surveys[is.na(surveys$date), c(\"year\", \"month\", \"day\")]\n\nhead(missing_dates)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 6 × 3\n#>    year month   day\n#>   <dbl> <dbl> <dbl>\n#> 1  2000     9    31\n#> 2  2000     4    31\n#> 3  2000     4    31\n#> 4  2000     4    31\n#> 5  2000     4    31\n#> 6  2000     9    31\n```\n:::\n:::\n\n\nWhy did these dates fail to parse? If you had to use these data for your\nanalyses, how would you deal with this situation?\n\nThe answer is because the dates provided as input for the `ymd()` function do not actually exist. If we refer to the output we got above, September and April only have 30 days, not 31 days as it is specified in our dataset.\n\nThere are several ways you could deal with situation:\n* If you have access to the raw data (e.g., field sheets) or supporting information (e.g., field trip reports/logs), check them and ensure the electronic database matches the information in the original data source.\n* If you are able to contact the person responsible for collecting the data, you could refer to them and ask for clarification.\n* You could also check the rest of the dataset for clues about the correct value for the erroneous dates. \n* If your project has guidelines on how to correct this sort of errors, refer to them and apply any recommendations.\n* If it is not possible to ascertain the correct value for these observations, you may want to leave them as missing data.\n\nRegardless of the option you choose, it is important that you document the error and the corrections (if any) that you apply to your data. \n\n\n\n\n<p style=\"text-align: right; font-size: small;\">Page built on: 📆 2022-08-22 ‒ 🕢 11:30:38</p>\n",
    "supporting": [
      "02-starting-with-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}