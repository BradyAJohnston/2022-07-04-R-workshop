{
  "hash": "91543ca1f53a3ac9be053956f755b3c8",
  "result": {
    "markdown": "---\ntitle: \"Before we start\"\nauthor: \"Data Carpentry contributors\"\nminutes: 15\neditor_options:\n  markdown:\n    wrap: 80\n---\n\n::: {.cell}\n\n:::\n\n\n:::{.callout-tip icon=false}\n\n### Learning Objectives\n\n-   Be able to explain what R and RStudio are, what they are used for, and how\n    they relate to each other.\n-   Describe the purpose of the RStudio Script, Console, Environment, and\n    Plots panes.\n-   Organize files and directories for a set of analyses as an R Project, and\n    understand the purpose of the working directory.\n-   Use the built-in RStudio help interface to search for more information on\n    R functions.\n-   Demonstrate how to provide sufficient information for troubleshooting with\n    the R user community.\n:::\n\n## What is R? What is RStudio?\n\nThe term \"`R`\" is used to refer to both the programming language and the\nsoftware that interprets the scripts written using it.\n\n[RStudio](https://rstudio.com) is currently a very popular way to not only write\nyour R scripts but also to interact with the R software. To function correctly,\nRStudio needs R and therefore both need to be installed on your computer.\n\n## Why learn R?\n\n### R does not involve lots of pointing and clicking, and that's a good thing\n\nThe learning curve might be steeper than with other software, but with R, the\nresults of your analysis do not rely on remembering a succession of pointing and\nclicking, but instead on a series of written commands, and that's a good thing!\nSo, if you want to redo your analysis because you collected more data, you don't\nhave to remember which button you clicked in which order to obtain your results.\nWith a stored series of commands (this is your script), you can repeat running them and\nR will process the new dataset exactly the same way as before.\n\nWorking with scripts makes the steps you used in your analysis clear, and the\ncode you write can be inspected by someone else who can give you feedback and\nspot mistakes.\n\nWorking with scripts forces you to have a deeper understanding of what you are\ndoing, and facilitates your learning and comprehension of the methods you use.\n\n### R code is great for reproducibility\n\nReproducibility is when someone else (including your future self) can obtain the\nsame results from the same dataset when using the same analysis.\n\nR integrates with other tools to generate manuscripts from your code. If you\ncollect more data, or fix a mistake in your dataset, the figures and the\nstatistical tests in your manuscript are updated automatically.\n\nAn increasing number of journals and funding agencies expect analyses to be\nreproducible, so knowing R will give you an edge with these requirements.\n\n### R is interdisciplinary and extensible\n\nWith 10,000+ packages that can be installed to extend its capabilities, R\nprovides a framework that allows you to combine statistical approaches from many\nscientific disciplines to best suit the analytical framework you need to analyze\nyour data. For instance, R has packages for image analysis, GIS, time series,\npopulation genetics, and a lot more.\n\n### R works on data of all shapes and sizes\n\nThe skills you learn with R scale easily with the size of your dataset. Whether\nyour dataset has hundreds or millions of lines, it won't make much difference to\nyou.\n\nR is designed for data analysis. It comes with special data structures and data\ntypes that make handling of missing data and statistical factors convenient.\n\nR can connect to spreadsheets, databases, and many other data formats, on your\ncomputer or on the web.\n\n### R produces high-quality graphics\n\nThe plotting functionalities in R are endless, and allow you to adjust any\naspect of your graph to convey most effectively the message from your data.\n\n### R has a large and welcoming community\n\nThousands of people use R daily. Many of them are willing to help you through\nmailing lists and websites such as [Stack Overflow](https://stackoverflow.com/),\nor on the [RStudio community](https://community.rstudio.com/).\n\n### Not only is R free, but it is also open-source and cross-platform\n\nAnyone can inspect the source code to see how R works. Because of this\ntransparency, there is less chance for mistakes, and if you (or someone else)\nfind some, you can report and fix bugs.\n\n## Knowing your way around RStudio\n\nLet's start by learning about [RStudio](https://www.rstudio.com/), which is an\nIntegrated Development Environment (IDE) for working with R.\n\nThe RStudio IDE open-source product is free under the [Affero General Public\nLicense (AGPL) v3](https://www.gnu.org/licenses/agpl-3.0.en.html). The RStudio\nIDE is also available with a commercial license and priority email support from\nRStudio, PBC.\n\nWe will use RStudio IDE to write code, navigate the files on our computer,\ninspect the variables we are going to create, and visualize the plots we will\ngenerate. RStudio can also be used for other things (e.g., version control,\ndeveloping packages, writing Shiny apps) that we will not cover during the\nworkshop.\n\n![RStudio interface screenshot. Clockwise from top left: Source,\nEnvironment/History, Files/Plots/Packages/Help/Viewer,\nConsole.](img/rstudio-screenshot.png)\n\nRStudio is divided into 4 \"panes\":\n\n-   The **Source** for your scripts and documents (top-left, in the default\n    layout)\n-   Your **Environment/History** (top-right) which shows all the objects in\n    your working space (Environment) and your command history (History)\n-   Your **Files/Plots/Packages/Help/Viewer** (bottom-right)\n-   The R **Console** (bottom-left)\n\nThe placement of these panes and their content can be customized (see menu,\nTools -\\> Global Options -\\> Pane Layout). For ease of use, settings such as\nbackground color, font color, font size, and zoom level can also be adjusted in\nthis menu (Global Options -> Appearance).\n\nOne of the advantages of using RStudio is that all the information you need to\nwrite code is available in a single window. Additionally, with many shortcuts,\nautocompletion, and highlighting for the major file types you use while\ndeveloping in R, RStudio will make typing easier and less error-prone.\n\n## Getting set up\n\nIt is good practice to keep a set of related data, analyses, and text\nself-contained in a single folder, called the **working directory**. All of the\nscripts within this folder can then use *relative paths* to files that indicate\nwhere inside the project a file is located (as opposed to absolute paths, which\npoint to where a file is on a specific computer). Working this way allows you to\nmove your project around on your computer and share it with others\nwithout worrying about whether or not the underlying scripts will still work.\n\nRStudio provides a helpful set of tools to do this through its \"Projects\"\ninterface, which not only creates a working directory for you, but also\nremembers its location (allowing you to quickly navigate to it) and optionally\npreserves custom settings and (re-)open files to assist resume work after\na break. Go through the steps for creating an \"R Project\" for this tutorial\nbelow.\n\n1.  Start RStudio.\n2.  Under the `File` menu, click on `New Project`. Choose `New Directory`, then\n    `New Project`.\n3.  Enter a name for this new folder (or \"directory\"), and choose a convenient\n    location for it. This will be your **working directory** for the rest of the\n    day (e.g., `~/data-carpentry`).\n4.  Click on `Create Project`.\n5.  Download the [code\n    handout](https://datacarpentry.org/R-ecology-lesson/code-handout.R), place\n    it in your working directory and rename it (e.g.,\n    `data-carpentry-script.R`).\n6.  (Optional) Set Preferences to 'Never' save workspace in RStudio.\n\nA workspace is your current working environment in R which includes any\nuser-defined object. By default, all of these objects will be saved, and\nautomatically loaded, when you reopen your project. Saving a workspace to\n`.RData` can be cumbersome, especially if you are working with larger datasets,\nand it can lead to hard to debug errors by having objects in memory you forgot\nyou had. Therefore, it is often a good idea to turn this off. To do so, go to\nTools --\\> 'Global Options' and select the 'Never' option for\n'Save workspace to .RData' on exit.'\n\n![Set 'Save workspace to .RData on exit' to\n'Never'](img/rstudio-preferences.png)\n\n### Organizing your working directory\n\nUsing a consistent folder structure across your projects will help keep things\norganized, and will help you to find/file things in the future. This\ncan be especially helpful when you have multiple projects. In general, you may\ncreate directories (folders) for **scripts**, **data**, and **documents**.\n\n-   **`data_raw/` & `data/`** Use these folders to store raw data and\n    intermediate datasets you may create for the need of a particular analysis.\n    For the sake of transparency and\n    [provenance](https://en.wikipedia.org/wiki/Provenance), you should *always*\n    keep a copy of your raw data accessible and do as much of your data cleanup\n    and preprocessing programmatically (i.e., with scripts, rather than\n    manually) as possible. Separating raw data from processed data is also a\n    good idea. For example, you could have files\n    `data_raw/tree_survey.plot1.txt` and `...plot2.txt` kept separate from a\n    `data/tree.survey.csv` file generated by the\n    `scripts/01.preprocess.tree_survey.R` script.\n-   **`documents/`** This would be a place to keep outlines, drafts, and other\n    text.\n-   **`scripts/`** This would be the location to keep your R scripts for\n    different analyses or plotting, and potentially a separate folder for your\n    functions (more on that later).\n-   **Additional (sub)directories** depending on your project needs.\n\nFor this workshop, we will need a `data_raw/` folder to store our raw data, and\nwe will use `data/` for when we learn how to export data as CSV files, and a\n`fig/` folder for the figures that we will save.\n\n-   Under the `Files` tab on the right of the screen, click on `New Folder` and\n    create a folder named `data_raw` within your newly created working directory\n    (e.g., `~/data-carpentry/`). (Alternatively, type `dir.create(\"data_raw\")`\n    at your R console.) Repeat these operations to create a `data` and a `fig`\n    folder.\n\nWe are going to keep the script in the root of our working directory because we\nare only going to use one file. Later, when you start create more\ncomplex projects, it might make sense to organize scripts in sub-directories.\n\nYour working directory should now look like this:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![How it should look like at the beginning of this lesson](img/r-starting-how-it-should-look-like.png){fig-align='center' width=100%}\n:::\n:::\n\n\n### The working directory\n\nThe working directory is an important concept to understand. It is the place\nfrom where R will be looking for and saving the files. When you write code for\nyour project, it should refer to files in relation to the root of your working\ndirectory and only need files within this structure.\n\nRStudio assists you in this regard and sets the working directory automatically\nto the directory where you have placed your project in.\nIf you need to check it, you can use `getwd()`. If for some\nreason your working directory is not what it should be, you can change it in the\nRStudio interface by navigating in the file browser where your working directory\nshould be, and clicking on the blue gear icon \"More\", and select \"Set As Working\nDirectory\". Alternatively you can use `setwd(\"/path/to/working/directory\")` to\nreset your working directory. However, your scripts should not include this line\nbecause it will fail on someone else's computer.\n\n## Interacting with R\n\nThe basis of programming is that we write down instructions for the computer to\nfollow, and then we tell the computer to follow those instructions. We write, or\n*code*, instructions in R because it is a common language that both the computer\nand we can understand. We call the instructions *commands* and we tell the\ncomputer to follow the instructions by *executing* (also called *running*) those\ncommands.\n\nThere are two main ways of interacting with R: by using the console or by using\nscript files (plain text files that contain your code). The console pane (in\nRStudio, the bottom left panel) is the place where commands written in the R\nlanguage can be typed and executed immediately by the computer. It is also where\nthe results will be shown for commands that have been executed. You can type\ncommands directly into the console and press `Enter` to execute those commands,\nbut they will be forgotten when you close the session.\n\nBecause we want our code and workflow to be reproducible, it is better to type\nthe commands we want in the script editor, and save the script. This way, there\nis a complete record of what we did, and anyone (including our future selves!)\ncan easily replicate the results on their computer.\n\nRStudio allows you to execute commands directly from the script editor by using\nthe <kbd>`Ctrl`</kbd> + <kbd>`Enter`</kbd> shortcut (on Macs, <kbd>`Cmd`</kbd> +\n<kbd>`Return`</kbd> will work, too). The command on the current line in the\nscript (indicated by the cursor) or all of the commands in the currently\nselected text will be sent to the console and executed when you press\n<kbd>`Ctrl`</kbd> + <kbd>`Enter`</kbd>. You can find other keyboard shortcuts in\nthis [RStudio cheatsheet about the RStudio\nIDE](https://raw.githubusercontent.com/rstudio/cheatsheets/main/rstudio-ide.pdf).\n\nAt some point in your analysis you may want to check the content of a variable\nor the structure of an object, without necessarily keeping a record of it in\nyour script. You can type these commands and execute them directly in the\nconsole. RStudio provides the <kbd>`Ctrl`</kbd> + <kbd>`1`</kbd> and\n<kbd>`Ctrl`</kbd> + <kbd>`2`</kbd> shortcuts allow you to jump between the\nscript and the console panes.\n\nIf R is ready to accept commands, the R console shows a `>` prompt. If it\nreceives a command (by typing, copy-pasting or sent from the script editor using\n<kbd>`Ctrl`</kbd> + <kbd>`Enter`</kbd>), R will try to execute it, and when\nready, will show the results and come back with a new `>` prompt to wait for new\ncommands.\n\nIf R is still waiting for you to enter more data because it isn't complete yet,\nthe console will show a `+` prompt. It means that you haven't finished entering\na complete command. This is because you have not 'closed' a parenthesis or\nquotation, i.e. you don't have the same number of left-parentheses as\nright-parentheses, or the same number of opening and closing quotation marks.\nWhen this happens, and you thought you finished typing your command, click\ninside the console window and press <kbd>`Esc`</kbd>; this will cancel the\nincomplete command and return you to the `>` prompt.\n\n## Seeking help\n\n### Searching function documentation with `?` and `??`\n\nIf you need help with a specific function, let's say `mean()`, you can type\n`?mean` or press <kbd>F1</kbd> while your cursor is on the function name. If you\nare looking for a function to do a particular task, but don't know the function\nname, you can use the double question mark `??`, for example `??kruskall`. Both\ncommands will open matching help files in RStudio's help panel in the lower\nright corner. You can also use the help panel to search help directly, as seen\nin the screenshot.\n\n![RStudio help panel. When typing a word in the search field, it will show\nrelated suggestions.](img/rstudiohelp.png)\n\n### Automatic code completion\n\nWhen you write code in RStudio, you can use its automatic code completion to\nremind yourself of a function's name or arguments. Start typing the function\nname and pay attention to the suggestions that pop up. Use the up and down arrow\nto select a suggested code completion and <kbd>Tab</kbd> to apply it. You can\nalso use code completion to complete function's argument names, object, names\nand file names. It even works if you don't get the spelling 100% correct.\n\n### Package vignettes and cheat sheets\n\nIn addition to the documentation for individual functions, many packages have\n*vignettes* -- instructions for how to use the package to do certain tasks.\nVignettes are great for learning by example. Vignettes are accessible via the\npackage help and by using the function `browseVignettes()`.\n\nThere is also a Help menu at the top of the RStudio window, that has cheat\nsheets for popular packages, RStudio keyboard shortcuts, and more.\n\n### Finding more functions and packages\n\nRStudio's help only searches the packages that you have installed on your\nmachine, but there are many more available on\n[CRAN](https://cran.r-project.org/) and [GitHub](https://github.com/). To search\nacross all available R packages, you can use the website\n[rdocumentation.org](https://www.rdocumentation.org). Often, a generic Google or\ninternet search \"R \\<task\\>\" will send you to the appropriate package\ndocumentation or a forum where someone else has already asked your question.\nMany packages also have websites with additional help, tutorials, news and more\n(for example [tidyverse.org](https://www.tidyverse.org/)).\n\n### Dealing with error messages\n\nDon't get discouraged if your code doesn't run immediately! Error messages are\ncommon when programming, and fixing errors is part of any programmer's daily\nwork. Often, the problem is a small typo in a variable name or a missing\nparenthesis. Watch for the red x's next to your code in RStudio. These may\nprovide helpful hints about the source of the problem.\n\n![RStudio shows a red x next to a line of code that R doesn't understand.\n](img/rstudioredx.png)\n\nIf you can't fix an error yourself, start by googling it. Some error messages\nare too generic to diagnose a problem (e.g. \"subscript out of bounds\"). In that\ncase it might help to include the name of the function or package you're using\nin your query.\n\n### Asking for help\n\nIf your Google search is unsuccessful, you may want to ask other R users for\nhelp. There are different places where you can ask for help. During this\nworkshop, don't hesitate to talk to your neighbor, compare your answers, and ask\nfor help. You might also be interested in organizing regular meetings following\nthe workshop to keep learning from each other. If you have a friend or colleague\nwith more experience than you, they might also be able and willing to help you.\n\nBesides that, there are a few places on the internet that provide help:\n\n-   [Stack Overflow](https://stackoverflow.com/questions/tagged/r?tab=Votes):\n    Many questions have already been answered, but the challenge is to use the\n    right words in your search to find them. If your question hasn't been\n    answered before and is well crafted, chances are you will get an answer in\n    less than 5 min. Remember to follow their guidelines on [how to ask a good\n    question](https://stackoverflow.com/help/how-to-ask).\n-   The [R-help mailing list](https://stat.ethz.ch/mailman/listinfo/r-help): it\n    is used by a lot of people (including most of the R core team). If your\n    question is valid (read its [Posting\n    Guide](https://www.r-project.org/posting-guide.html)), you are likely to get\n    an answer very fast, but the tone can be pretty dry and it is not always\n    very welcoming to new users.\n-   If your question is about a specific package rather than a base R function,\n    see if there is a mailing list for the package. Usually it's included in the\n    DESCRIPTION file of the package that can be accessed using\n    `packageDescription(\"<package-name>\")`.\n-   You can also try to contact the package author directly, by emailing them or\n    opening an issue on the code repository (e.g., on GitHub).\n-   There are also some topic-specific mailing lists (GIS, phylogenetics,\n    etc...).  The complete list is [on the R mailing lists website](https://www.r-project.org/mail.html).\n\nThe key to receiving help from someone is for them to rapidly grasp your\nproblem. Thus, you should be as precise as possible when describing your problem\nand help others to pinpoint where the issue might be. Try to...\n\n-   Use the correct words to describe your problem. Otherwise you might get an\n    answer pointing to the misuse of your words rather than answering your\n    question.\n\n-   Generalize what you are trying to do, so people outside your field can\n    understand the question.\n\n-   Reduce what does not work to a simple *reproducible example*. For instance,\n    instead of using your real data set, create a small generic one. For more\n    information on how to write a reproducible example see [this article from\n    the reprex\n    package](https://reprex.tidyverse.org/articles/reprex-dos-and-donts.html).\n    Learning how to use the [reprex](https://cran.r-project.org/package=reprex)\n    package is also very helpful for this.\n\n-   Include the output of `sessionInfo()` in your question. It provides\n    information about your platform, the versions of R and the packages that you\n    are using. As an example, here you can see the versions of R and all the\n    packages that we are using to run the code in this lesson:\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> R version 4.2.1 (2022-06-23 ucrt)\n#> Platform: x86_64-w64-mingw32/x64 (64-bit)\n#> Running under: Windows 10 x64 (build 22000)\n#> \n#> Matrix products: default\n#> \n#> locale:\n#> [1] LC_COLLATE=English_Australia.utf8  LC_CTYPE=English_Australia.utf8   \n#> [3] LC_MONETARY=English_Australia.utf8 LC_NUMERIC=C                      \n#> [5] LC_TIME=English_Australia.utf8    \n#> \n#> attached base packages:\n#> [1] stats     graphics  grDevices datasets  utils     methods   base     \n#> \n#> other attached packages:\n#>  [1] RSQLite_2.2.16  forcats_0.5.1   stringr_1.4.1   dplyr_1.0.9    \n#>  [5] purrr_0.3.4     readr_2.1.2     tidyr_1.2.0     tibble_3.1.8   \n#>  [9] ggplot2_3.3.6   tidyverse_1.3.2 knitr_1.39     \n#> \n#> loaded via a namespace (and not attached):\n#>  [1] Rcpp_1.0.9          lubridate_1.8.0     assertthat_0.2.1   \n#>  [4] digest_0.6.29       utf8_1.2.2          R6_2.5.1           \n#>  [7] cellranger_1.1.0    backports_1.4.1     reprex_2.0.1       \n#> [10] evaluate_0.16       httr_1.4.3          pillar_1.8.1       \n#> [13] rlang_1.0.4         googlesheets4_1.0.0 readxl_1.4.0       \n#> [16] blob_1.2.3          rmarkdown_2.14      googledrive_2.0.0  \n#> [19] bit_4.0.4           munsell_0.5.0       broom_1.0.0        \n#> [22] compiler_4.2.1      modelr_0.1.9        xfun_0.32          \n#> [25] pkgconfig_2.0.3     htmltools_0.5.3     tidyselect_1.1.2   \n#> [28] fansi_1.0.3         crayon_1.5.1        tzdb_0.3.0         \n#> [31] dbplyr_2.2.1        withr_2.5.0         grid_4.2.1         \n#> [34] jsonlite_1.8.0      gtable_0.3.0        lifecycle_1.0.1    \n#> [37] DBI_1.1.3           magrittr_2.0.3      scales_1.2.1       \n#> [40] cachem_1.0.6        cli_3.3.0           stringi_1.7.8      \n#> [43] renv_0.15.5         fs_1.5.2            xml2_1.3.3         \n#> [46] ellipsis_0.3.2      generics_0.1.3      vctrs_0.4.1        \n#> [49] tools_4.2.1         bit64_4.0.5         glue_1.6.2         \n#> [52] hms_1.1.1           fastmap_1.1.0       yaml_2.3.5         \n#> [55] colorspace_2.0-3    gargle_1.2.0        rvest_1.0.2        \n#> [58] memoise_2.0.1       haven_2.5.0\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n## How to learn more after the workshop?\n\nThe material we cover during this workshop will give you a taste of how you can\nuse R to analyze data for your own research. However, to do advanced operations\nsuch as cleaning your dataset, using statistical methods, or creating beautiful\ngraphics you will need to learn more.\n\nThe best way to become proficient and efficient at R, as with any other tool, is\nto use it to address your actual research questions. As a beginner, it can feel\ndaunting to have to write a script from scratch, and given that many people make\ntheir code available online, modifying existing code to suit your purpose might\nget first hands-on experience using R for your own work and help you become\ncomfortable eventually creating your own scripts.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/kitten-try-things.jpg){fig-align='center' width=400px}\n:::\n:::\n\n\n## More resources\n\n#### More about R\n\n-   The [Introduction to R](https://cran.r-project.org/doc/manuals/R-intro.pdf)\n    can also be dense for people with little programming experience but it is a\n    good place to understand the underpinnings of the R language.\n-   The [R FAQ](https://cran.r-project.org/doc/FAQ/R-FAQ.html) is dense and\n    technical but it is full of useful information.\n-   To stay up to date, follow `#rstats` on twitter. Twitter can also be a way\n    to get questions answered and learn about useful R packages and tipps (e.g.,\n    [@RLangTips])\n\n#### How to ask good programming questions?\n\n-   The rOpenSci community call \"How to ask questions so they get answered\",\n    ([rOpenSci site](https://ropensci.org/commcalls/2017-03-07/) and [video\n    recording](https://vimeo.com/208749032)) includes a presentation of the\n    reprex package and of its philosophy.\n-   [blog.Revolutionanalytics.com](https://blog.revolutionanalytics.com/2014/01/how-to-ask-for-r-help.html)\n    and [this blog post by Jon Skeet](https://codeblog.jonskeet.uk/2010/08/29/writing-the-perfect-question/)\n    have comprehensive advice on how to ask programming questions.\n\n\n\n\n<p style=\"text-align: right; font-size: small;\">Page built on: 📆 2022-08-22 ‒ 🕢 11:31:39</p>\n",
    "supporting": [
      "before-we-start_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}