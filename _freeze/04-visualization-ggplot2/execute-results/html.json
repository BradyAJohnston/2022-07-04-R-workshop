{
  "hash": "65e6c6182c720cbd619b9bbefab77531",
  "result": {
    "markdown": "---\ntitle: Data visualization with ggplot2\nauthor: Data Carpentry contributors\nminutes: 60\neditor_options:\n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n:::{.callout-tip icon=false}\n### Learning Objectives\n\n * Produce scatter plots, boxplots, and time series plots using ggplot.\n * Set universal plot settings.\n * Describe what faceting is and apply faceting in ggplot.\n * Modify the aesthetics of an existing ggplot plot (including axis labels and color).\n * Build complex and customized plots from data in a data frame.\n:::\n\n\nWe start by loading the required packages. **`ggplot2`** is included in the **`tidyverse`** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nIf not still in the workspace, load the data we saved in the previous lesson.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys_complete <- read_csv(\"data/surveys_complete.csv\")\n```\n:::\n\n\n## Plotting with **`ggplot2`**\n\n**`ggplot2`** is a plotting package that provides helpful commands to create complex plots\nfrom data in a data frame. It provides a more programmatic interface for\nspecifying what variables to plot, how they are displayed, and general visual\nproperties. Therefore, we only need minimal changes if the underlying data\nchange or if we decide to change from a bar plot to a scatterplot. This helps in\ncreating publication quality plots with minimal amounts of adjustments and\ntweaking. \n\n**`ggplot2`** refers to the name of the package itself. When using the package we use the\nfunction **`ggplot()`** to generate the plots, and so references to using the function will\nbe referred to as **`ggplot()`** and the package as a whole as **`ggplot2`** \n\n**`ggplot2`** plots work best with data in the 'long' format, i.e., a column for every variable,\nand a row for every observation. Well-structured data will save you lots of time\nwhen making figures with **`ggplot2`**\n\nggplot graphics are built layer by layer by adding new elements. Adding layers in\nthis fashion allows for extensive flexibility and customization of plots.\n\nTo build a ggplot, we will use the following basic template that can be used for different types of plots:\n\n```\nggplot(data = <DATA>, mapping = aes(<MAPPINGS>)) +  <GEOM_FUNCTION>()\n```\n\n- use the `ggplot()` function and bind the plot to a specific data frame using\n  the `data` argument\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys_complete)\n```\n:::\n\n\n- define an aesthetic mapping (using the aesthetic (`aes`) function), by\nselecting the variables to be plotted and specifying how to present them in the\ngraph, e.g., as x/y positions or characteristics such as size, shape, color, etc.      \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length))\n```\n:::\n\n\n- add 'geoms' â€“ graphical representations of the data in the plot (points,\n  lines, bars). **`ggplot2`** offers many different geoms; we will use some\n  common ones today, including:\n\n  * `geom_point()` for scatter plots, dot plots, etc.\n  * `geom_boxplot()` for, well, boxplots!\n  * `geom_line()` for trend lines, time series, etc.  \n\nTo add a geom to the plot use `+` operator. Because we have two continuous\nvariables, let's use `geom_point()` first:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys_complete, aes(x = weight, y = hindfoot_length)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-first-ggplot-1.png){width=672}\n:::\n:::\n\n\nThe `+` in the **`ggplot2`** package is particularly useful because it allows\nyou to modify existing `ggplot` objects. This means you can easily set up plot\n\"templates\" and conveniently explore different types of plots, so the above\nplot can also be generated with code like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assign plot to a variable\nsurveys_plot <- ggplot(data = surveys_complete,\n                       mapping = aes(x = weight, y = hindfoot_length))\n\n# Draw the plot\nsurveys_plot +\n    geom_point()\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n**Notes**\n\n- Anything you put in the `ggplot()` function can be seen by any geom layers\n  that you add (i.e., these are universal plot settings). This includes the x-\n  and y-axis you set up in `aes()`.\n- You can also specify aesthetics for a given geom independently of the\n  aesthetics defined globally in the `ggplot()` function.\n- The `+` sign used to add layers must be placed at the end of each line\n  containing a layer. If, instead, the `+` sign is added in the line before the\n  other layer, **`ggplot2`** will not add the new layer and will return an error\n  message.\n- You may notice that we sometimes reference 'ggplot2' and sometimes 'ggplot'.\n  To clarify, 'ggplot2' is the name of the most recent version of the package.\n  However, any time we call the function itself, it's just called 'ggplot'.\n- The previous version of the **`ggplot2`** package, called **`ggplot`**,\n  which also contained the `ggplot()` function is now unsupported and has\n  been removed from CRAN in order to reduce accidental installations\n  and further confusion.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This is the correct syntax for adding layers\nsurveys_plot +\n  geom_point()\n\n# This will not add the new layer and will return an error message\nsurveys_plot\n  + geom_point()\n```\n:::\n\n\n:::{.callout-warning icon=false}\n\n### Challenge (optional)\n\nScatter plots can be useful exploratory tools for small datasets. For data\nsets with large numbers of observations, such as the `surveys_complete` data\nset, overplotting of points can be a limitation of scatter plots. One strategy\nfor handling such settings is to use hexagonal binning of observations. The\nplot space is tessellated into hexagons. Each hexagon is assigned a color\nbased on the number of observations that fall within its boundaries.  To use\nhexagonal binning with **`ggplot2`**, first install the R package `hexbin`\nfrom CRAN:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"hexbin\")\nlibrary(hexbin)\n```\n:::\n\n\nThen use the `geom_hex()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurveys_plot +\n geom_hex()\n```\n:::\n\n\n- What are the relative strengths and weaknesses of a hexagonal bin plot\n  compared to a scatter plot? Examine the above scatter plot and compare it\n  with the hexagonal bin plot that you created.\n\n:::\n\n\n::: {.cell}\n\n:::\n\n\n## Building your plots iteratively\n\nBuilding plots with **`ggplot2`** is typically an iterative process. We start by\ndefining the dataset we'll use, lay out the axes, and choose a geom:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys_complete, aes(x = weight, y = hindfoot_length)) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-create-ggplot-object-1.png){width=672}\n:::\n:::\n\n\nThen, we start modifying this plot to extract more information from it. For\ninstance, we can add transparency (`alpha`) to avoid overplotting:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys_complete, aes(x = weight, y = hindfoot_length)) +\n    geom_point(alpha = 0.1)\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-adding-transparency-1.png){width=672}\n:::\n:::\n\n\nWe can also add colors for all the points:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length)) +\n    geom_point(alpha = 0.1, color = \"blue\")\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-adding-colors-1.png){width=672}\n:::\n:::\n\n\nOr to color each species in the plot differently, you could use a vector as an input to the argument **color**. **`ggplot2`** will provide a different color corresponding to different values in the vector. Here is an example where we color with **`species_id`**:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length)) +\n    geom_point(alpha = 0.1, aes(color = species_id))\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-color-by-species-1-1.png){width=672}\n:::\n:::\n\n\n:::{.callout-warning icon=false}\n### Challenge\n\nUse what you just learned to create a scatter plot of `weight` over\n`species_id` with the plot types showing in different colors.\nIs this a good way to show this type of data?\n\n:::{.callout-tip icon=false collapse=true}\n\n#### Answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys_complete,\n       mapping = aes(x = species_id, y = weight)) +\n   geom_point(aes(color = plot_type))\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n:::\n:::\n\n\n::: {.cell}\n\n:::\n\n\n## Boxplot\n\nWe can use boxplots to visualize the distribution of weight within each species:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys_complete, mapping = aes(x = species_id, y = weight)) +\n    geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-boxplot-1.png){width=672}\n:::\n:::\n\n\nBy adding points to the boxplot, we can have a better idea of the number of\nmeasurements and of their distribution:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys_complete, mapping = aes(x = species_id, y = weight)) +\n    geom_boxplot(alpha = 0) +\n    geom_jitter(alpha = 0.3, color = \"tomato\")\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-boxplot-with-points-1.png){width=672}\n:::\n:::\n\n\nNotice how the boxplot layer is behind the jitter layer? What do you need to\nchange in the code to put the boxplot in front of the points such that it's not\nhidden?\n\n:::{.callout-warning icon=false}\n### Challenges\n\nBoxplots are useful summaries, but hide the *shape* of the distribution. For\nexample, if there is a bimodal distribution, it would not be observed with a\nboxplot. An alternative to the boxplot is the violin plot (sometimes known as\na beanplot), where the shape (of the density of points) is drawn.\n\n- Replace the box plot with a violin plot; see `geom_violin()`.\n\nIn many types of data, it is important to consider the *scale* of the\nobservations.  For example, it may be worth changing the scale of the axis to\nbetter distribute the observations in the space of the plot.  Changing the scale\nof the axes is done similarly to adding/modifying other components (i.e., by\nincrementally adding commands). Try making these modifications:\n\n- Represent weight on the log~10~ scale; see `scale_y_log10()`.\n\nSo far, we've looked at the distribution of weight within species. Try making\na new plot to explore the distribution of another variable within each species.\n\n- Create boxplot for `hindfoot_length`.  Overlay the boxplot layer on a jitter\n  layer to show actual measurements.\n\n- Add color to the data points on your boxplot according to the plot from which\n  the sample was taken (`plot_id`).\nHint: Check the class for `plot_id`. Consider changing the class of `plot_id`\nfrom integer to factor. Why does this change how R makes the graph?\n:::\n\n\n::: {.cell}\n\n:::\n\n\n\n## Plotting time series data\n\nLet's calculate number of counts per year for each genus. First we need\nto group the data and count records within each group:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyearly_counts <- surveys_complete %>%\n  count(year, genus)\n```\n:::\n\n\nTimelapse data can be visualized as a line plot with years on the x-axis and\ncounts on the y-axis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = yearly_counts, aes(x = year, y = n)) +\n     geom_line()\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-first-time-series-1.png){width=672}\n:::\n:::\n\n\nUnfortunately, this does not work because we plotted data for all the genera\ntogether. We need to tell ggplot to draw a line for each genus by modifying\nthe aesthetic function to include `group = genus`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = yearly_counts, aes(x = year, y = n, group = genus)) +\n    geom_line()\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-time-series-by-species-1.png){width=672}\n:::\n:::\n\n\nWe will be able to distinguish genera in the plot if we add colors (using\n`color` also automatically groups the data):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = yearly_counts, aes(x = year, y = n, color = genus)) +\n    geom_line()\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-time-series-with-colors-1.png){width=672}\n:::\n:::\n\n\n\n## Integrating the pipe operator with ggplot2\n\nIn the previous lesson, we saw how to use the pipe operator `%>%` to use\ndifferent functions in a sequence and create a coherent workflow.\nWe can also use the pipe operator to pass the `data` argument to the\n`ggplot()` function. The hard part is to remember that to build your ggplot,\nyou need to use `+` and not `%>%`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyearly_counts %>%\n    ggplot(mapping = aes(x = year, y = n, color = genus)) +\n    geom_line()\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-integrating-the-pipe-1.png){width=672}\n:::\n:::\n\n\nThe pipe operator can also be used to link data manipulation with consequent data visualization.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyearly_counts_graph <- surveys_complete %>%\n    count(year, genus) %>%\n    ggplot(mapping = aes(x = year, y = n, color = genus)) +\n    geom_line()\n\nyearly_counts_graph\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-pipes-and-manipulation-1.png){width=672}\n:::\n:::\n\n\n\n## Faceting\n\n`ggplot` has a special technique called *faceting* that allows the user to split\none plot into multiple plots based on a factor included in the dataset. We will\nuse it to make a time series plot for each genus:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = yearly_counts, aes(x = year, y = n)) +\n    geom_line() +\n    facet_wrap(facets = vars(genus))\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-first-facet-1.png){width=672}\n:::\n:::\n\n\nNow we would like to split the line in each plot by the sex of each individual\nmeasured. To do that we need to make counts in the data frame grouped by `year`,\n`genus`, and `sex`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n yearly_sex_counts <- surveys_complete %>%\n                      count(year, genus, sex)\n```\n:::\n\n\nWe can now make the faceted plot by splitting further by sex using `color`\n(within a single plot):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = yearly_sex_counts, mapping = aes(x = year, y = n, color = sex)) +\n  geom_line() +\n  facet_wrap(facets =  vars(genus))\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-facet-by-genus-and-sex-1.png){width=672}\n:::\n:::\n\n\nWe can also facet both by sex and genus:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = yearly_sex_counts,\n       mapping = aes(x = year, y = n, color = sex)) +\n  geom_line() +\n  facet_grid(rows = vars(sex), cols =  vars(genus))\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-average-weight-time-facet-both-1.png){width=912}\n:::\n:::\n\n\nYou can also organise the panels only by rows (or only by columns):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# One column, facet by rows\nggplot(data = yearly_sex_counts,\n       mapping = aes(x = year, y = n, color = sex)) +\n  geom_line() +\n  facet_grid(rows = vars(genus))\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-average-weight-time-facet-sex-rows-1.png){width=768}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# One row, facet by column\nggplot(data = yearly_sex_counts,\n       mapping = aes(x = year, y = n, color = sex)) +\n  geom_line() +\n  facet_grid(cols = vars(genus))\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-average-weight-time-facet-sex-columns-1.png){width=912}\n:::\n:::\n\n\n\n**Note:**\n`ggplot2` before version 3.0.0 used formulas to specify how plots are faceted.\nIf you encounter `facet_grid`/`wrap(...)` code containing `~`, please read\n<https://ggplot2.tidyverse.org/news/#tidy-evaluation>.\n\n\n## **`ggplot2`** themes\n\nUsually plots with white background look more readable when printed.\nEvery single component of a `ggplot` graph can be customized using the generic\n`theme()` function, as we will see below. However, there are pre-loaded themes\navailable that change the overall appearance of the graph without much effort.\n\nFor example, we can change our previous graph to have a simpler white background\nusing the `theme_bw()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n ggplot(data = yearly_sex_counts,\n        mapping = aes(x = year, y = n, color = sex)) +\n     geom_line() +\n     facet_wrap(vars(genus)) +\n     theme_bw()\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-facet-by-species-and-sex-white-bg-1.png){width=672}\n:::\n:::\n\n\nIn addition to `theme_bw()`, which changes the plot background to white, **`ggplot2`**\ncomes with several other themes which can be useful to quickly change the look\nof your visualization. The complete list of themes is available\nat <https://ggplot2.tidyverse.org/reference/ggtheme.html>. `theme_minimal()` and\n`theme_light()` are popular, and `theme_void()` can be useful as a starting\npoint to create a new hand-crafted theme.\n\nThe\n[ggthemes](https://jrnold.github.io/ggthemes/reference/index.html) package\nprovides a wide variety of options.\n\n:::{.callout-warning icon=false}\n### Challenge\n\nUse what you just learned to create a plot that depicts how the average weight\nof each species changes through the years.\n\n:::{.callout-tip icon=false collapse=true}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyearly_weight <- surveys_complete %>%\n                group_by(year, species_id) %>%\n                 summarize(avg_weight = mean(weight))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `summarise()` has grouped output by 'year'. You can override using the\n#> `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nggplot(data = yearly_weight, mapping = aes(x=year, y=avg_weight)) +\n   geom_line() +\n   facet_wrap(vars(species_id)) +\n   theme_bw()\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n:::\n:::\n\n\n::: {.cell}\n\n:::\n\n\n\n## Customization\n\nTake a look at the [**`ggplot2`** cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization-2.1.pdf), and\nthink of ways you could improve the plot.\n\nNow, let's change names of axes to something more informative than 'year'\nand 'n' and add a title to the figure:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = yearly_sex_counts, aes(x = year, y = n, color = sex)) +\n    geom_line() +\n    facet_wrap(vars(genus)) +\n    labs(title = \"Observed genera through time\",\n         x = \"Year of observation\",\n         y = \"Number of individuals\") +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-number-species-year-with-right-labels-1.png){width=672}\n:::\n:::\n\n\nThe axes have more informative names, but their readability can be improved by\nincreasing the font size. This can be done with the generic `theme()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = yearly_sex_counts, mapping = aes(x = year, y = n, color = sex)) +\n    geom_line() +\n    facet_wrap(vars(genus)) +\n    labs(title = \"Observed genera through time\",\n        x = \"Year of observation\",\n        y = \"Number of individuals\") +\n    theme_bw() +\n    theme(text=element_text(size = 16))\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-number-species-year-with-right-labels-xfont-size-1.png){width=672}\n:::\n:::\n\n\nNote that it is also possible to change the fonts of your plots. If you are on\nWindows, you may have to install\nthe [**`extrafont`** package](https://github.com/wch/extrafont), and follow the\ninstructions included in the README for this package.\n\nAfter our manipulations, you may notice that the values on the x-axis are still\nnot properly readable. Let's change the orientation of the labels and adjust\nthem vertically and horizontally so they don't overlap. You can use a 90 degree\nangle, or experiment to find the appropriate angle for diagonally oriented\nlabels. We can also modify the facet label text (`strip.text`) to italicize the genus\nnames:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = yearly_sex_counts, mapping = aes(x = year, y = n, color = sex)) +\n    geom_line() +\n    facet_wrap(vars(genus)) +\n    labs(title = \"Observed genera through time\",\n        x = \"Year of observation\",\n        y = \"Number of individuals\") +\n    theme_bw() +\n    theme(axis.text.x = element_text(colour = \"grey20\", size = 12, angle = 90, hjust = 0.5, vjust = 0.5),\n                        axis.text.y = element_text(colour = \"grey20\", size = 12),\n                        strip.text = element_text(face = \"italic\"),\n                        text = element_text(size = 16))\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-number-species-year-with-theme-1.png){width=672}\n:::\n:::\n\n\nIf you like the changes you created better than the default theme, you can save\nthem as an object to be able to easily apply them to other plots you may create:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrey_theme <- theme(axis.text.x = element_text(colour=\"grey20\", size = 12,\n                                               angle = 90, hjust = 0.5,\n                                               vjust = 0.5),\n                    axis.text.y = element_text(colour = \"grey20\", size = 12),\n                    text=element_text(size = 16))\n\nggplot(surveys_complete, aes(x = species_id, y = hindfoot_length)) +\n    geom_boxplot() +\n    grey_theme\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-number-species-year-with-right-labels-xfont-orientation-1.png){width=672}\n:::\n:::\n\n\n:::{.callout-warning icon=false}\n### Challenge\n\nWith all of this information in hand, please take another five minutes to either\nimprove one of the plots generated in this exercise or create a beautiful graph\nof your own. Use the RStudio [**`ggplot2`** cheat sheet](https://www.rstudio.com/wp-content/uploads/2016/11/ggplot2-cheatsheet-2.1.pdf)\nfor inspiration.\n\nHere are some ideas:\n\n* See if you can change the thickness of the lines.\n* Can you find a way to change the name of the legend? What about its labels?\n* Try using a different color palette (see\n  <https://www.cookbook-r.com/Graphs/Colors_(ggplot2)/>).\n:::\n\n## Arranging plots\n\nFaceting is a great tool for splitting one plot into multiple plots, but\nsometimes you may want to produce a single figure that contains multiple plots\nusing different variables or even different data frames. The **`patchwork`**\npackage allows us to combine separate ggplots into a single figure while keeping\neverything aligned properly. Like most R packages, we can install `patchwork`\nfrom CRAN, the R package repository:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"patchwork\")\n```\n:::\n\n\nAfter you have loaded the `patchwork` package you can use `+` to place plots\nnext to each other, `/` to arrange them vertically, and `plot_layout()` to\ndetermine how much space each plot uses:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\n\nplot_weight <- ggplot(data = surveys_complete, aes(x = species_id, y = weight)) +\n  geom_boxplot() +\n  labs(x = \"Species\", y = expression(log[10](Weight))) +\n  scale_y_log10()\n\nplot_count <- ggplot(data = yearly_counts, aes(x = year, y = n, color = genus)) +\n  geom_line() +\n  labs(x = \"Year\", y = \"Abundance\")\n\npatch <- plot_weight / plot_count + plot_layout(heights = c(3, 2))\npatch\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-patchwork-example-1.png){width=960}\n:::\n:::\n\n\nYou can also use parentheses `()` to create more complex layouts. There are\nmany useful examples on the [patchwork website](https://patchwork.data-imaginist.com/)\n\n#### Adding Tags\n\nPatchwork can also help you add relevant sub-panel tags.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npatch + plot_annotation(tag_levels = \"A\", tag_suffix = \")\")\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\npatch + plot_annotation(tag_levels = 1, tag_suffix = \")\", tag_prefix = \"(\")\n```\n\n::: {.cell-output-display}\n![](img/R-ecology-unnamed-chunk-12-2.png){width=672}\n:::\n:::\n\n\n\n## Exporting plots\n\nAfter creating your plot, you can save it to a file in your favorite format. The\nExport tab in the **Plot** pane in RStudio will save your plots at low\nresolution, which will not be accepted by many journals and will not scale well\nfor posters. The [**`ggplot2`** extensions website](https://exts.ggplot2.tidyverse.org/) provides a list\nof packages that extend the capabilities of **`ggplot2`**, including additional\nthemes.\n\nInstead, use the `ggsave()` function, which allows you to easily change the\ndimension and resolution of your plot by adjusting the appropriate arguments\n(`width`, `height` and `dpi`):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_plot <- ggplot(data = yearly_sex_counts,\n                  aes(x = year, y = n, color = sex)) +\n    geom_line() +\n    facet_wrap(vars(genus)) +\n    labs(title = \"Observed genera through time\",\n        x = \"Year of observation\",\n        y = \"Number of individuals\") +\n    theme_bw() +\n    theme(axis.text.x = element_text(colour = \"grey20\", size = 12, angle = 90,\n                                     hjust = 0.5, vjust = 0.5),\n          axis.text.y = element_text(colour = \"grey20\", size = 12),\n          text = element_text(size = 16))\n\nggsave(\"name_of_file.png\", my_plot, width = 15, height = 10)\n\n## This also works for plots combined with patchwork\nplot_combined <- plot_weight / plot_count + plot_layout(heights = c(3, 2))\nggsave(\"plot_combined.png\", plot_combined, width = 10, dpi = 300)\n```\n:::\n\n\nNote: The parameters `width` and `height` also determine the font size in the\nsaved plot.\n\n\n\n::: {.cell}\n\n:::\n\n\n\n<p style=\"text-align: right; font-size: small;\">Page built on: ðŸ“† 2022-06-30 â€’ ðŸ•¢ 15:52:35</p>\n",
    "supporting": [
      "04-visualization-ggplot2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}