{
  "hash": "21c5e118edd890f4cb16ee23374be538",
  "result": {
    "markdown": "---\ntitle: \"R Markdown\"\nauthor: Brady Johnston\n---\n\n\n::: {.callout-tip icon=\"false\"}\n#### Learning Objectives\n\n-   Create a .Rmd document containing R code, text, and plots\n-   Create a YAML header to control output\n-   Understand basic syntax of (R)Markdown\n-   Customise code chunks to control formatting\n-   Use code chunks and in-line code to create dynamic, reproducible documents\n:::\n\n\n\n\n\n![\\@allison_horst](https://github.com/allisonhorst/stats-illustrations/raw/master/rstats-artwork/rmarkdown_wizards.png){fig-alt=\"Two fuzzy round monsters dressed as wizards, working together to brew different things together from a pantry (code, text, figures, etc.) in a cauldron labeled “R Markdown”. The monster wizard at the cauldron is reading a recipe that includes steps “1. Add text. 2. Add code. 3. Knit. 4. (magic) 5. Celebrate perceived wizardry.” The R Markdown potion then travels through a tube, and is converted to markdown by a monster on a broom with a magic wand, and eventually converted to an output by pandoc. Stylized text (in a font similar to Harry Potter) reads “R Markdown. Text. Code. Output. Get it together, people.”\"}\n\n## R Markdown\n\nR Markdown is a flexible type of document that allows you to seamlessly combine executable R code, and its output, with text in a single document. These documents can be readily converted to multiple static and dynamic output formats, including PDF (`.pdf`), Word (`.docx`), and HTML (`.html`).\n\nThe benefit of a well-prepared R Markdown document is full reproducibility. This also means that, if you notice a data transcription error, or you are able to add more data to your analysis, you will be able to recompile the report without making any changes in the actual document.\n\nThe **rmarkdown** package comes pre-installed with RStudio, so no action is necessary.\n\n## Creating an R Markdown file\n\nTo create a new R Markdown document in RStudio, click File -\\> New File -\\> R Markdown:\n\n![Screenshot of the New R Markdown file dialogue box in RStudio](images/CleanShot%202022-07-01%20at%2014.21.53.png)\n\nThen click on 'Create Empty Document'. Normally you could enter the title of your document, your name (Author), and select the type of output, but we will be learning how to start from a blank document.\n\n## Basic components of R Markdown\n\nTo control the output, a YAML ('YAML Ain't Markup Language', or, 'Yet Another Markup Language') header is needed:\n\n    ---\n    title: \"My Awesome Report\"\n    author: \"Brady Johnston\"\n    date: 2022-07-11\n    output: html_document\n    ---\n\nThe header is defined by the three hyphens at the beginning (`---`) and the three hyphens at the end (`---`).\n\nIn the YAML, the only required field is the `output:`, which specifies the type of output you want. This can be an `html_document`, a `pdf_document`, or a `word_document`. We will start with an HTML doument and discuss the other options later.\n\nThe rest of the fields can be deleted, if you don't need them. After the header, to begin the body of the document, you start typing after the end of the YAML header (i.e. after the second `---`).\n\n## Markdown syntax\n\nMarkdown is a popular markup language that allows you to add formatting elements to text, such as **bold**, *italics*, and `code`. The formatting will not be immediately visible in a markdown (.md) document, like you would see in a Word document. Rather, you add Markdown syntax to the text, which can then be converted to various other files that can translate the Markdown syntax. Markdown is useful because it is lightweight, flexible, and platform independent.\n\nSome platforms provide a real time preview of the formatting, like RStudio's visual markdown editor (available from version 1.4).\n\nFirst, let's create a heading! A `#` in front of text indicates to Markdown that this text is a heading. Adding more `#`s make the heading smaller, i.e. one `#` is a first level heading, two `##`s is a second level heading, etc. upto the 6th level heading.\n\n    # Title\n    ## Section\n    ### Sub-section\n    #### Sub-sub section\n    ##### Sub-sub-sub section\n    ###### Sub-sub-sub-sub section\n\n(only use a level if the one above is also in use)\n\nSince we have already defined our title in the YAML header, we will use a section heading to create an Introduction section.\n\n    ## Introduction\n\nYou can make things **bold** by surrounding the word with double asterisks, `**bold**`, or double underscores, `__bold__`; and *italicize* using single asterisks, `*italics*`, or single underscores, `_italics_`.\n\nYou can also combine **bold** and *italics* to write something ***really*** important with triple-asterisks, `***really***`, or underscores, `___really___`; and, if you're feeling bold (pun intended), you can also use a combination of asterisks and underscores, `**_really_**`, `**_really_**`.\n\nTo create `code-type` font, surround the word with backticks, \\`code-type\\`.\n\nNow that we've learned a couple of things, it might be useful to implement them:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Attaching packages --------------------------------------- tidyverse 1.3.1 --\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nv ggplot2 3.3.5     v purrr   0.3.4\nv tibble  3.1.6     v dplyr   1.0.8\nv tidyr   1.2.0     v stringr 1.4.0\nv readr   2.1.2     v forcats 0.5.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tibble' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyr' was built under R version 4.1.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dplyr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\ndf <- read_csv(\"TL_datavase.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 122 Columns: 11\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (5): Locality of house, Education Highest achieved, Electricity connecte...\ndbl (6): Respondent Female ID, Age NA, Status 1=oldest, Age at 1B Age at 1st...\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ndf %>% \n  head() %>% \n  knitr::kable()\n```\n\n::: {.cell-output-display}\n| Respondent Female ID|Locality of house | Age NA| Status 1=oldest|Education Highest achieved | Age at 1B Age at 1st birth| Pregnancies Number of| Births Number of|Electricity connected |Adopted Children in household |Wage male head of HH |\n|--------------------:|:-----------------|------:|---------------:|:--------------------------|--------------------------:|---------------------:|----------------:|:---------------------|:-----------------------------|:--------------------|\n|                  101|Ossu              |     78|               1|None or some Elementary    |                         NA|                    15|               15|Yes                   |Present                       |Wages                |\n|                  201|Ossu              |     69|               1|None or some Elementary    |                         28|                     8|                5|Yes                   |Present                       |Wages                |\n|                  301|Ossu              |     35|               1|None or some Elementary    |                         20|                     6|                4|Yes                   |None                          |No Wages             |\n|                  401|Ossu              |     42|               1|Elementary                 |                         25|                     7|                7|Yes                   |None                          |No Wages             |\n|                  502|Ossu              |     26|               2|Senior High                |                         17|                     6|                6|Yes                   |None                          |NA                   |\n|                  602|Ossu              |     30|               2|Senior High                |                         23|                     4|                3|Yes                   |None                          |Wages                |\n:::\n\n```{.r .cell-code}\ndf <- df %>% \n  janitor::clean_names() %>% \n  filter(age_na > 0)\n\ndf %>% \n  group_by(locality_of_house, education_highest_achieved) %>% \n  count() %>% \n  \n  ggplot(aes(locality_of_house, education_highest_achieved)) + \n  geom_tile(aes(fill = n)) + \n  theme_minimal() + \n  scale_fill_viridis_c(option = \"A\")\n```\n\n::: {.cell-output-display}\n![](rmarkdown_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n    ## Introduction\n\n    This report uses the **tidyverse** package along with the *SAFI* dataset, \n    which has columns that include:\n\nThen we can create a list for the variables using `-`, `+`, or `*` keys.\n\n    ## Introduction\n\n    This report uses the **tidyverse** package along with the *SAFI* dataset, \n    which has columns that include:\n\n    - village\n    - interview_date\n    - no_members\n    - years_liv\n    - respondent_wall_type\n    - rooms\n\nYou can also create an ordered list using numbers:\n\n    1. village\n    2. interview_date\n    3. no_members\n    4. years_liv\n    5. respondent_wall_type\n    6. rooms\n\nAnd nested items by tab-indenting:\n\n    - village\n      + Name of village\n    - interview_date\n      + Date of interview\n    - no_members\n      + How many family members lived in a house\n    - years_liv\n      + How many years respondent has lived in village or neighbouring village\n    - respondent_wall_type\n      + Type of wall of house\n    - rooms\n      + Number of rooms in house\n\nFor more Markdown syntax see [the following reference guide](https://www.markdownguide.org/basic-syntax).\n\nNow we can render the document into HTML by clicking the **Knit** button in the top of the Source pane (top left), or use the keyboard shortcut <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>K</kbd> on Windows and Linux, and <kbd>Cmd</kbd>+<kbd>Shift</kbd>+<kbd>K</kbd> on Mac. If you haven't saved the document yet, you will be prompted to do so when you **Knit** for the first time.\n\n![The 'knitting' process: First, R Markdown is converted to Markdown, which is then converted (via pandoc) to .html, .pdf, .docx, etc.](https://datacarpentry.org/r-socialsci/fig/rmd-rmd_to_html.png)\n\n## Writing an R Markdown report\n\nNow we will add some R code from our previous data wrangling and visualisation, which means we need to make sure **tidyverse** is loaded. It is not enough to load **tidyverse** from the console, we will need to load it within our R Markdown document. The same applies to our data. To load these, we will need to create a 'code chunk' at the top of our document (below the YAML header).\n\nA code chunk can be inserted by clicking Code \\> Insert Chunk, or by using the keyboard shortcuts <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>I</kbd> on Windows and Linux, and <kbd>Cmd</kbd>+<kbd>Option</kbd>+<kbd>I</kbd> on Mac. In the RStudio visual editor, you can use the 'everything key' of <kbd>Cmd</kbd> / <kbd>Ctrl</kbd> + <kbd>/</kbd> and choose 'R Code Chunk'\n\nThe syntax of a code chunk is:\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n# this is where your code goes\nprint(10 * 20)\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 200\n```\n:::\n:::\n\n\nThe chunk is defined as a code chunk by the ```` ``` ```` at the beginning and the end, and the language of the code is defined in the *curly* brackets `{r}`. Rmarkdown can also support the running of Python, Julia and many other coding languages.\n\nYou can add options to the code chunk with the special knitr comment `#|` . Below we label the code chunnk `example-figure-chunk` so that we can reference it inside of the report and add a caption that will show up in the rendered document. RStudio also supports auto-complete and tool-tips for code-chunks to help you find useful options.\n\n![Example auto-completion options for code chunks.](images/CleanShot%202022-07-01%20at%2014.35.47.png){fig-align=\"center\"}\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: example-figure-chunk\n#| fig-cap: \"A test figure.\"\n\nplot(mtcars$mpg, mtcars$wt, type = \"p\")\n```\n````\n\n::: {.cell-output-display}\n![A test figure.](rmarkdown_files/figure-html/example-figure-chunk-1.png){width=672}\n:::\n:::\n\n\n#### In-text code.\n\nInstead of just using code in separated code chunks, you can also use code in-line with your other writing, so you can reference the results of computations in the text, without having to copy-and-paste the values (which can be error prone).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nour_result <- 10 * 20\n```\n:::\n\n\nWe can use the code chunks ``` `` ``` and start it with `` `r ` `` to tell `knitr` that we want it to be treated as code, `` 200 `` will be: 200.\n\n\n::: {.cell}\n\n:::\n\n\nTo load **tidyverse** and our `SAFI_clean.csv` file, we will insert a chunk and call it 'setup'. Since we don't want this code or the output to show in our knitted HTML document, we add an `include = FALSE` option after the code chunk name (`{r setup, include = FALSE}`).\n\n\n```{=html}\n<pre>\n&#96;&#96;&#96;{r setup, include = FALSE}\nlibrary(tidyverse)\nlibrary(here)\ninterviews <- read_csv(here(\"data/SAFI_clean.csv\"), na = \"NULL\")\n&#96;&#96;&#96;\n</pre>\n```\n\n> ## Important Note!\n>\n> The file paths you give in a .Rmd document, e.g. to load a .csv file, are relative to the .Rmd document, **not** the project root.\n>\n> As suggested in the Starting with Data episode, we highly recommend the use of the `here()` function to keep the file paths consistent within your project. {: .callout}\n\n## Insert table\n\nNext, we will re-create a table from the Data Wrangling episode which shows the average household size grouped by `village` and `memb_assoc`. We can do this by creating a new code chunk and calling it 'interview-tbl'. Or, you can come up with something more creative (just remember to stick to the naming rules).\n\nIt isn't necessary to **Knit** your document every time you want to see the output. Instead you can run the code chunk with the green triangle in the top right corner of the the chunk, or with the keyboard shortcuts: <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>C</kbd> on Windows and Linux, or <kbd>Cmd</kbd>+<kbd>Option</kbd>+<kbd>C</kbd> on Mac.\n\nTo make sure the table is formatted nicely in our output document, we will need to use the `kable()` function from the **knitr** package. The `kable()` function takes the output of your R code and knits it into a nice looking HTML table. You can also specify different aspects of the table, e.g. the column names, a caption, etc.\n\nRun the code chunk to make sure you get the desired output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninterviews %>%\n    filter(!is.na(memb_assoc)) %>%\n    group_by(village, memb_assoc) %>%\n    summarize(mean_no_membrs = mean(no_membrs)) %>%\n  knitr::kable(caption = \"We can also add a caption.\", \n               col.names = c(\"Village\", \"Member Association\", \n                             \"Mean Number of Members\"))\n```\n:::\n\n\n## Customising chunk output\n\nWe mentioned using `include = FALSE` in a code chunk to prevent the code and output from printing in the knitted document. There are additional options available to customise how the code-chunks are presented in the output document. The options are entered in the code chunk after `chunk-name`and separated by commas, e.g. `{r chunk-name, eval = FALSE, echo = TRUE}`.\n\n| Option      | Options                              | Output                                                                                                                                                |\n|-------------|--------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `eval`      | `TRUE` or `FALSE`                    | Whether or not the code within the code chunk should be run.                                                                                          |\n| `echo`      | `TRUE` or `FALSE`                    | Choose if you want to show your code chunk in the output document. `echo = TRUE` will show the code chunk.                                            |\n| `include`   | `TRUE` or `FALSE`                    | Choose if the output of a code chunk should be included in the document. `FALSE` means that your code will run, but will not show up in the document. |\n| `warning`   | `TRUE` or `FALSE`                    | Whether or not you want your output document to display potential warning messages produced by your code.                                             |\n| `message`   | `TRUE` or `FALSE`                    | Whether or not you want your output document to display potential messages produced by your code.                                                     |\n| `fig.align` | `default`, `left`, `right`, `center` | Where the figure from your R code chunk should be output on the page                                                                                  |\n\n> ## Tip\n>\n> -   The default settings for the above chunk options are all `TRUE`.\n> -   The default settings can be modified per chunk, or with `knitr::opts_chunk$set()`,\n> -   Entering `knitr::opts_chunk$set(echo = FALSE)` will change the default of value of `echo` to `FALSE` for **every** code chunk in the document. {: .callout}\n\n> ## Exercise\n>\n> Play around with the different options in the chunk with the code for the table, and re-**Knit** to see what each option does to the output.\n>\n> What happens if you use `eval = FALSE` and `echo = FALSE`? What is the difference between this and `include = FALSE`? \\> \\## Solution to Exercise \\> \\> Create a chunk with `{r eval = FALSE, echo = FALSE}`, then create another \\> chunk with `{r include = FALSE}` to compare. \\> `eval = FALSE` and `echo = FALSE` will neither run the code in the chunk, \\> nor show the code in the knitted document. The code chunk essentially \\> doesn't exist in the knitted document as it was never run. Whereas \\> `include = FALSE` will run the code and store the output for later use. {: .solution} {: .challenge}\n\n## In-line R code\n\nNow we will use some in-line R code to present some descriptive statistics. To use in-line R-code, we use the same backticks that we used in the Markdown section, with an \\`r\\` to specify that we are generating R-code. The difference between in-line code and a code chunk is the number of backticks. In-line R code uses one backtick (), whereas code chunks use three backticks (\\`\\`\\` r \\`\\`\\`).\n\n\n::: {.cell}\n\n:::\n\n\nFor example, today's date is 2022-07-11, will be rendered as: today's date is 2022-07-11. The code will display today's date in the output document (well, technically the date the document was last knitted).\n\nThe best way to use in-line R code, is to minimise the amount of code you need to produce the in-line output by preparing the output in code chunks. Let's say we're interested in presenting the average household size in a village.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a summary data frame with the mean household size by village\nmean_household <- interviews %>%\n    group_by(village) %>%\n    summarize(mean_no_membrs = mean(no_membrs))\n\n# and select the village we want to use\nmean_chirodzo <- mean_household %>%\n  filter(village == \"Chirodzo\")\n```\n:::\n\n\nNow we can make an informative statement on the means of each village, and include the mean values as in-line R-code. For example:\n\nThe average household size in the village of Chirodzo is `round(mean_chirodzo$mean_no_membrs, 2)`\n\nbecomes...\n\nThe average household size in the village of Chirodzo is `round(mean_chirodzo$mean_no_membrs, 2)`.\n\nBecause we are using in-line R code instead of the actual values, we have created a dynamic document that will automatically update if we make changes to the dataset and/or code chunks.\n\n## Plots\n\nFinally, we will also include a plot, so our document is a little more colourful and a little less boring. We will use the `interview_plotting` data from the previous episode.\n\nIf you were unable to complete the previous lesson or did not save the data, then you can create it in a new code chunk.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Not run, but can be used to load in data from previous lesson!\ninterviews_plotting <- interviews %>%\n  ## pivot wider by items_owned\n  separate_rows(items_owned, sep = \";\") %>%\n  ## if there were no items listed, changing NA to no_listed_items\n  replace_na(list(items_owned = \"no_listed_items\")) %>%\n  mutate(items_owned_logical = TRUE) %>%\n  pivot_wider(names_from = items_owned, \n              values_from = items_owned_logical, \n              values_fill = list(items_owned_logical = FALSE)) %>%\n  ## pivot wider by months_lack_food\n  separate_rows(months_lack_food, sep = \";\") %>%\n  mutate(months_lack_food_logical = TRUE) %>%\n  pivot_wider(names_from = months_lack_food, \n              values_from = months_lack_food_logical, \n              values_fill = list(months_lack_food_logical = FALSE)) %>%\n  ## add some summary columns\n  mutate(number_months_lack_food = rowSums(select(., Jan:May))) %>%\n  mutate(number_items = rowSums(select(., bicycle:car)))\n```\n:::\n\n\n> ## Exercise\n>\n> Create a new code chunk for the plot, and copy the code from any of the plots we created in the previous episode to produce a plot in the chunk. I recommend one of the colourful plots.\n>\n> If you are feeling adventurous, you can also create a new plot with the `interviews_plotting` data frame.\n>\n> > ## Solution to Exercise\n> >\n> > ::: {.cell answer='true'}\n> > \n> > ```{.r .cell-code}\n> > interviews_plotting %>%\n> >   ggplot(aes(x = respondent_wall_type)) +\n> >   geom_bar(aes(fill = village))\n> > ```\n> > :::\n> >\n> > {: .solution} {: .challenge}\n\nWe can also create a caption with the chunk option `fig.cap`.\n\n\n```{=html}\n<pre>\n&#96;&#96;&#96;{r chunk-name, fig.cap = \"I made this plot while attending an\nawesome Data Carpentries workshop where I learned a ton of cool stuff!\"}\nCode for plot\n&#96;&#96;&#96;\n</pre>\n```\n\n...or, ideally, something more informative.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninterviews_plotting %>%\n  ggplot(aes(x = respondent_wall_type)) +\n  geom_bar(aes(fill = village), position = \"dodge\") + \n  labs(x = \"Type of Wall in Home\", y = \"Count\", fill = \"Village Name\") +\n  scale_fill_viridis_d() # add colour deficient friendly palette\n```\n:::\n\n\n## Other output options\n\nYou can convert R Markdown to a PDF or a Word document (among others). Click the little triangle next to the **Knit** button to get a drop-down menu. Or you could put `pdf_document` or `word_document` in the initial header of the file.\n\n    ---\n    title: \"My Awesome Report\"\n    author: \"Emmet Brickowski\"\n    date: \"\"\n    output: word_document\n    ---\n\n> ## Note: Creating PDF documents\n>\n> Creating .pdf documents may require installation of some extra software. The R package `tinytex` provides some tools to help make this process easier for R users. With `tinytex` installed, run `tinytex::install_tinytex()` to install the required software (you'll only need to do this once) and then when you **Knit** to pdf `tinytex` will automatically detect and install any additional LaTeX packages that are needed to produce the pdf document. Visit the [tinytex website](https://yihui.org/tinytex/) for more information.\n>\n> {: .callout}\n\n## Resources\n\n-   [Knitr in a knutshell tutorial](http://kbroman.org/knitr_knutshell)\n-   [Dynamic Documents with R and knitr](http://www.amazon.com/exec/obidos/ASIN/1482203537/7210-20) (book)\n-   [R Markdown documentation](http://rmarkdown.rstudio.com)\n-   [R Markdown cheat sheet](https://github.com/rstudio/cheatsheets/blob/master/rmarkdown-2.0.pdf)\n-   [Getting started with R Markdown](https://www.rstudio.com/resources/webinars/getting-started-with-r-markdown/)\n-   [Markdown tutorial](https://commonmark.org/help/tutorial/)\n-   [R Markdown: The Definitive Guide](https://bookdown.org/yihui/rmarkdown/) (book by Rstudio team)\n-   [Reproducible Reporting](https://www.rstudio.com/resources/webinars/reproducible-reporting/)\n-   [The Ecosystem of R Markdown](https://www.rstudio.com/resources/webinars/the-ecosystem-of-r-markdown/)\n-   [Introducing Bookdown](https://www.rstudio.com/resources/webinars/introducing-bookdown/)\n",
    "supporting": [
      "rmarkdown_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}