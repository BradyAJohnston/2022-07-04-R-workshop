{
  "hash": "d0ca174a4e4348131d4b2e4121781676",
  "result": {
    "markdown": "\n# Contributing\n\n\n[Data Carpentry](https://datacarpentry.org) is an open source project, and we\nwelcome contributions of all kinds: new lessons, fixes to existing material, bug\nreports, and reviews of proposed changes are all welcome.\n\n## Contributor Agreement\n\nBy contributing, you agree that we may redistribute your work\nunder [our license](https://datacarpentry.org/R-ecology-lesson/LICENSE.html).\nIn exchange, we will address your issues and/or assess your change proposal as\npromptly as we can, and help you become a member of our community.  Everyone\ninvolved in [Software Carpentry](https://software-carpentry.org)\nand [Data Carpentry](https://datacarpentry.org) agrees to abide by\nour\n[code of conduct](https://datacarpentry.org/R-ecology-lesson/CONDUCT.html).\n\n\n## Working with GitHub\n\n### Submitting Issues on GitHub\n\nIf you have an idea about how to improve the lesson, you can submit it as an \nissue on GitHub. If you have multiple unrelated suggestions, it is best to \nopen a separate issue for each of them. This makes it easier for the project \nmaintainers to discuss and resolve them.\n\nSubmitting an issue can count as a contribution\nfor your instructor training checkout. If your contribution is for instructor \ntraining, send an email with a link to the issue to \n[checkout@carpentries.org](mailto:checkout@carpentries.org). \nPlease note that it is _not_ necessary to point out in the issue's title or text \nthat it is a contribution for the instructor training checkout.\n\n### Submitting Pull Requests\n\nYou can also suggest changes by modifying the lesson code directly and submitting\nyour changes as a pull request.\n\n1.  Fork the `datacarpentry/R-ecology-lesson` repository on GitHub.  *See the\n    \"Fork\" button in the top-right corner of the screen on the GitHub website.*\n\n2.  Clone that repository to your own machine. (It is also possible\n    to make minor edits right on GitHub.) *At your terminal:*\n\n\t```bash\n\tgit clone https://github.com/your_username/R-ecology-lesson.git R-ecology-lesson\n\tcd R-ecology-lesson\n\tgit remote add upstream https://github.com/datacarpentry/R-ecology-lesson.git\n\t```\n\n3.  Create a branch from `main` for your changes.\n    Give your branch a meaningful name,\n    such as `fix-typos-dplyr-lesson`\n    or `add-tutorial-on-visualization`. *At your terminal:*\n\n\t```bash\n\tgit checkout -b fix-typos-dplyr-lesson\n\t```\n\n4.  Make your changes to the Rmd file. If you'd like to check the rendered\n    version of your changes, you can do one of three things:\n\n\t* if you have `GNU Make` installed on your system, type `make` at your shell\n      terminal.\n\t* if you use RStudio, click on the \"Knit\" button in the top-right corner of\n      your editor pane.\n\t* in other cases, you can type:\n      `rmarkdown::render_site(\"01-intro-to-r.Rmd\")` in your R terminal (make\n      sure your working directory is at the root of the lesson) to generate the\n      corresponding html file.\n\n5.  Commit the Rmd file you edited (`git add file-you-changed.Rmd`, followed by\n    `git commit -m \"fix typos in dplyr lesson\"`), and push your changes to your\n    repository on GitHub (`git push origin fix-typos-dplyr-lesson`).  If your\n    change affects a lesson, **please only commit and push the `Rmd`\n    files**. The rendered versions will be generated by the lesson maintainers\n    to avoid merge conflicts.\n\n5.  Send a pull request (PR) to the `main` branch of the\n    `datacarpentry/R-ecology-lesson` repository for this lesson at\n    https://github.com/datacarpentry/R-ecology-lesson\n\nIf you are new to Git or GitHub, software like \n[GitHub Desktop](https://desktop.github.com/) can make this process easier for\nyou.\n\nIf it is easier for you to send edits to us some other way, please\nmail us at [checkout@carpentries.org](mailto:checkout@carpentries.org).\nGiven a choice between you creating content or wrestling with Git,\nwe'd rather have you doing the former.\n\n\n## File Locations and Formats\n\n### RMarkdown \n\nFor the R material, lessons are written in RMarkdown (files ending in\n`Rmd`). Filenames follow the pattern `00-before-we-start.Rmd`,\n`01-intro-to-r.Rmd` and so on. That is, we use two digits followed\nby a topic key to ensure files appear in the right order when listed.\n\nA Makefile converts the Rmd files into HTML files that are\nprocessed by Jekyll (the tool GitHub uses to create websites) as\nexplained in [the README file](https://github.com/datacarpentry/R-ecology-lesson#readme).\n\nTo ensure a consistent formatting of the lessons, we recommend the\nfollowing formatting guidelines for RMarkdown files:\n\n* No trailing white space\n* Wrap lines at 80 characters (unless it breaks URLs)\n* Use consistent capitalization (e.g., R not r, RStudio not rstudio\nor Rstudio)\n* Function names are written as `function()` while variables are\nwritten as `variable`, and package names as **`package`**.\n* Use unclosed atx style headers (see below):\n\n```\n## Use this format for headers\n\nAnd not this format\n-------------------\n```\n\n#### Formatting RMarkdown Code Chunks\n\nMost R code within .Rmd files is written inside of code chunks. \nCode chunks can have a name and a number of options, but neither is\nrequired. Options are added to a code chunk like this:\n\n` ```{r, chunk_name, option1 = value, option2 = value, ...}`\n\nThroughout the lesson, we use different code chunk options, mostly \nto change when and how the code in the chunks is being executed. \nBelow you will find a list of the most common options we use and \ninformation on how we use them. \nMore information on RMarkdown code chunk options \ncan be found [here](https://yihui.org/knitr/options). When in doubt,\nconsult the `Rmd` files for examples.\n\n##### `answer = [FALSE | TRUE]`\n\nThe `answer` option is used in challenges to hide the content of the chunk\nso that the reader needs to interact with the website to reveal it.\nThe default value is `FALSE`.\n\n##### `echo = [FALSE | TRUE]`\n\nIf `echo = FALSE`, the code will be executed and its output will be visible\non the lesson website (unless specified otherwise by the `eval`, `message`, \nor `results` options), but the code itself will not be visible. \nThis is useful when writing code for the code handout, because it allows to \ninclude redundant headings and comments that are not needed in the \nlesson itself, but help to structure and clarify the code handout. \nThe default value is `TRUE`.\n\n##### `eval = [FALSE | TRUE]`\n\nIf `eval = FALSE` the code in the chunk will not be executed by `R` when\nthe file is processed to create the lesson website. Accordingly, no output\nwill be created.\nThis is useful, for example, when seeing the result of the code is not \nrequired for the lesson, or when the code chunk contains code that installs \nor loads packages, downloads files, or opens the `R` help window. \nThe default value is `TRUE`.\n\n##### `message = [FALSE | TRUE]` \n\nIf `FALSE` messages produced by the code will not be shown.\nTHis is useful, for example when loading packages like **`tidyverse`** that\noutput when loaded. By using `message = FALSE`, such output can be hidden.\nThe default value is `TRUE`.\n\n##### `purl = [FALSE | TRUE]`\n\nCode chunks that have the option `purl = TRUE` will be included in the \ncode handout (see below). The default value is `FALSE`.\n\n##### `results = ['markup' | 'hide' | 'asis' | 'hold']`\n\nDetermines if and how the text output of a code chunk is formatted.\nUseful values are `markup` (to format text output using markup, usually \nformatting it as a code block), `asis` (to write  raw output directly \ninto the document without any markup), and `hide` (to hide the output, \nfor example when loading data sets).\n\n### Code Handout \n\nThe code handout `code-handout.R` contains code that can be distributed \nto learners.\nThis is particularly useful for error prone code such as long URLs for \ndownloading files.\nThe code handout is created automatically from the lesson's `.Rmd` files\nby `make_code_handout.R`, and we use the `purl()` function from `knitr` to  \ncreate the handout. \nCode that should be included in the code handout must be enclosed in an \n`R` code chunk with the chunk option `purl = TRUE` (see above).\nTo make the handout more useful, consider including explanatory comments. \n\n### Data\n\nWe don't store data for lessons inside the lesson repositories. For\ncompleted lessons the data should be publicly available in a data\nrepository appropriate to the data type. For lesson development the\ndata may be provided in any way that is convenient including\nposting to a website, on [figshare](https://figshare.com/), a public\nDropbox link, a [GitHub gist](https://gist.github.com), or even\nincluded in the pull request (PR). Once the PR is ready to merge the data should\nbe placed in the [official data repository](https://doi.org/10.6084/m9.figshare.1314459.v5)\nand all links to the data updated.\n\nRaw data go into `data_raw/`. However, at this stage, this folder is\ncreated programmatically and only contain dataset downloaded directly\nfrom the Figshare repository. In other words, it can be safely be\ndeleted (e.g. using `make clean-data` or `make clean`.)\n\nThe `data/` folder only contains data generated/exported by R\ncode.\n\n### Images \n\nImages (e.g., screenshots) are stored in the `img/` folder. Graphics\ngenerated by some R code also go into this folder and get the prefix\n`R-ecology-`. This latter case is handled automatically with some\nknitr options in the `setup.R` file.\n\n### Website Assets\n\nThe `site_libs` folder is generated by the **rmarkdown** package and\nholds the javascript, css, and fonts used by the website.\n\nWe aim to have our lessons be as self-contained as possible. Images and \nother external resources should be included in the repository whenever possible. \n\n\n## FAQ\n\n*   *Where can I get help?*\n    <br/>\n    Mail us at [team@carpentries.org](mailto:team@carpentriesorg)\n    or come chat with us on [Slack](https://swc-slack-invite.herokuapp.com/).\n\n\n\n\n\n<p style=\"text-align: right; font-size: small;\">Page built on: 📆 2022-08-22 ‒ 🕢 11:31:45</p>\n",
    "supporting": [
      "CONTRIBUTING_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}